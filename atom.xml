<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fdw&#39;blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-19T06:56:10.260Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown</title>
    <link href="http://example.com/2023/09/18/2023-9-18/"/>
    <id>http://example.com/2023/09/18/2023-9-18/</id>
    <published>2023-09-18T09:13:19.851Z</published>
    <updated>2023-09-19T06:56:10.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一篇文章教你学会Markdown语法"><a href="#一篇文章教你学会Markdown语法" class="headerlink" title="一篇文章教你学会Markdown语法"></a>一篇文章教你学会Markdown语法</h1><h2 id="Markdown介绍"><a href="#Markdown介绍" class="headerlink" title="Markdown介绍"></a>Markdown介绍</h2><p> 首先markdown作为一种轻量级的标记语言，能够允许我们快速的编写文档，而使用markdown编写的文档非常容易的导出成例如: HTML、word、图像或者是PDF等形式，markdown的后缀是以md结尾的，很多网站都支持以markdown形式编写文档或者是发表文章，例如GitHub、简书、有道云笔记等等。<br> 而我这篇文档是采用了一款编辑器stackedit来编写的</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>首先标题主要分为6级，类似于word里面的标题，如下图:</p><p><img src="/2023/09/18/2023-9-18/%E6%A0%87%E9%A2%98markdown.jpg" alt="图片" title="fdw"><br><img src="/2023/09/18/2023-9-18/%E6%A0%87%E9%A2%98%E5%89%8D%E7%AB%AF.jpg" alt="图片" title="fdw"></p><h2 id="引用-列表"><a href="#引用-列表" class="headerlink" title="引用 列表"></a>引用 列表</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>用大于符号：&gt; 表示<br>例如：</p><blockquote><blockquote><p>这是一串引用<br>这是一串引用<br>这是一串引用<br>这是一串引用<br>这是一串引用</p></blockquote></blockquote><p>使用说明<strong>大于号开头一定要新开一行，而结束引用同时需要你空开一行表示结束</strong></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>（有序列表 无序列表）</p><p>例如：</p><ol><li>有序列表以数字开头</li><li>有序列表数字后面加个点 .</li><li>有序列表点之后要有空格</li></ol><p>例如：</p><ul><li>无序列表可以以短横线-和空格开始文章</li><li>也可以用*符号代替</li></ul><p>特殊的列表：任务列表</p><p>例如：</p><ul><li><input disabled="" type="checkbox"> 任务列表以- 空格[空格]空格作为格式</li><li><input disabled="" type="checkbox"> 方框之中可以写一个X字母来表示任务已经完成</li><li><input checked="" disabled="" type="checkbox"> 比如说这样</li><li><input checked="" disabled="" type="checkbox"> 打豆豆<h2 id="代码块-数学公式-表格"><a href="#代码块-数学公式-表格" class="headerlink" title="代码块 数学公式 表格"></a>代码块 数学公式 表格</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3>以```三个反引号+需要的代码的语言<br>例如:<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">以三个```结束</span><br></pre></td></tr></tbody></table></figure><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3></li></ul><p><em>因为我好久没碰过数据公式了，而且我以后也碰不到，就先不展示了</em></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>例如：</p><table><thead><tr><th align="left">语文</th><th align="right">数学</th><th align="center">英语</th></tr></thead><tbody><tr><td align="left">填入</td><td align="right">your</td><td align="center">data</td></tr><tr><td align="left">左对齐你看出来了吗</td><td align="right">右对齐你看出来了吗</td><td align="center">最后一个是居中对齐</td></tr></tbody></table><p>具体写入格式参考以下图片</p><p><img src="/2023/09/18/2023-9-18/%E8%A1%A8%E6%A0%BC.jpg" alt="表格"></p><h2 id="脚注-横线"><a href="#脚注-横线" class="headerlink" title="脚注 横线"></a>脚注 横线</h2><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>格式：脚注名[^ 脚注内容]<br>[^ 脚注内容] 脚注名字在文章结尾解释一下<br>例子：<br>fdw的博客树屋<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="加我好友V-NaihqLoading">1</span></a></sup></p><h3 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h3><hr><p>比如说你想要分段，使得文章更加清晰可以使用3个-，如上</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="网页链接"><a href="#网页链接" class="headerlink" title="网页链接"></a>网页链接</h3><p>链接格式：<br>[链接名]    (链接地址 “可以加入一个提示”)<br>例如：<br><a href="www.baidu.com" title="一个搜索引擎">百度</a><br>有一种多次引用链接的方法，类似于一个类，引用这个类</p><h3 id="标题链接"><a href="#标题链接" class="headerlink" title="标题链接"></a>标题链接</h3><p>链接格式：<br>XXX：[标题1]（#标题名字）<br>例如：<br>点击这里返回主标题:<a href="#%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%95%99%E4%BD%A0%E5%AD%A6%E4%BC%9AMarkdown%E8%AF%AD%E6%B3%95">这里</a></p><h3 id="URL链接"><a href="#URL链接" class="headerlink" title="URL链接"></a>URL链接</h3><p>直接输入协议链接<br><a href="http://www.baidu.com/">http://www.baidu.com</a></p><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>链接格式</p><ol><li>添加网址 ![图片名字](一个网址 “鼠标放在上面的提示”)</li><li>本地图片![图片名字](图片的绝对路径 “鼠标放在上面的提示”)</li></ol><h2 id="文章内格式"><a href="#文章内格式" class="headerlink" title="文章内格式"></a>文章内格式</h2><ul><li>一对星号表示 <em>斜体</em></li><li>两对星号表示<strong>加粗</strong></li><li>一对反引号表示<code>行内代码</code></li><li>HTML中的U标签标识 <u>下划线</u></li><li>一对冒号加上emoji官方名称表示表情 <span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li><li>两对==表示高亮</li></ul><h4 id="今天的内容就分享到这里，我是fdwjnzs，-づ￣-3￣-づ"><a href="#今天的内容就分享到这里，我是fdwjnzs，-づ￣-3￣-づ" class="headerlink" title="今天的内容就分享到这里，我是fdwjnzs，(づ￣ 3￣)づ"></a>今天的内容就分享到这里，我是fdwjnzs，(づ￣ 3￣)づ</h4><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">加我好友V-NaihqLoading<a href="#fnref:1" rev="footnote">↩</a></span></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一篇文章教你学会Markdown语法&quot;&gt;&lt;a href=&quot;#一篇文章教你学会Markdown语法&quot; class=&quot;headerlink&quot; title=&quot;一篇文章教你学会Markdown语法&quot;&gt;&lt;/a&gt;一篇文章教你学会Markdown语法&lt;/h1&gt;&lt;h2 id=&quot;M</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/09/18/%E7%97%85%E4%BA%86/"/>
    <id>http://example.com/2023/09/18/%E7%97%85%E4%BA%86/</id>
    <published>2023-09-18T02:49:50.401Z</published>
    <updated>2023-09-19T07:06:19.555Z</updated>
    
    <content type="html"><![CDATA[<p>感觉自己睡的也不是很晚<br>一眼醒过来就是12点<br>随便吃个午饭<br>看个手机<br>头又开始晕乎乎<br>又上床躺着<br>再醒过来<br>都四点了<br>什么都不想干<br>就脑子放空<br>感觉我病了 有没有药可以救我<br><img src="/2023/09/18/%E7%97%85%E4%BA%86/%E7%94%9F%E7%97%85.jpg" alt="表情包"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;感觉自己睡的也不是很晚&lt;br&gt;一眼醒过来就是12点&lt;br&gt;随便吃个午饭&lt;br&gt;看个手机&lt;br&gt;头又开始晕乎乎&lt;br&gt;又上床躺着&lt;br&gt;再醒过来&lt;br&gt;都四点了&lt;br&gt;什么都不想干&lt;br&gt;就脑子放空&lt;br&gt;感觉我病了 有没有药可以救我&lt;br&gt;&lt;img src=&quot;/2023/0</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://example.com/2023/09/18/MySQL/"/>
    <id>http://example.com/2023/09/18/MySQL/</id>
    <published>2023-09-18T02:49:50.372Z</published>
    <updated>2022-05-04T02:27:13.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><p>创建表：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class="line">...</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></tbody></table></figure><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = 'Jack' WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名字段</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后的条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></tbody></table></figure><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE '/_张三' ESCAPE '/'</code><br>/ 之后的_不作为通配符</p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 ||</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-- 年龄等于30</span><br><span class="line">select * from employee where age = 30;</span><br><span class="line">-- 年龄小于30</span><br><span class="line">select * from employee where age &lt; 30;</span><br><span class="line">-- 小于等于</span><br><span class="line">select * from employee where age &lt;= 30;</span><br><span class="line">-- 没有身份证</span><br><span class="line">select * from employee where idcard is null or idcard = '';</span><br><span class="line">-- 有身份证</span><br><span class="line">select * from employee where idcard;</span><br><span class="line">select * from employee where idcard is not null;</span><br><span class="line">-- 不等于</span><br><span class="line">select * from employee where age != 30;</span><br><span class="line">-- 年龄在20到30之间</span><br><span class="line">select * from employee where age between 20 and 30;</span><br><span class="line">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class="line">-- 下面语句不报错，但查不到任何信息</span><br><span class="line">select * from employee where age between 30 and 20;</span><br><span class="line">-- 性别为女且年龄小于30</span><br><span class="line">select * from employee where age &lt; 30 and gender = '女';</span><br><span class="line">-- 年龄等于25或30或35</span><br><span class="line">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class="line">select * from employee where age in (25, 30, 35);</span><br><span class="line">-- 姓名为两个字</span><br><span class="line">select * from employee where name like '__';</span><br><span class="line">-- 身份证最后为X</span><br><span class="line">select * from employee where idcard like '%X';</span><br></pre></td></tr></tbody></table></figure><h4 id="聚合查询（聚合函数）"><a href="#聚合查询（聚合函数）" class="headerlink" title="聚合查询（聚合函数）"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = "广东省";</code></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class="line">select count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性数量</span><br><span class="line">select gender, count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class="line">select gender, avg(age) from employee group by gender;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组</span><br><span class="line">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="line">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></tbody></table></figure><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 根据年龄升序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC;</span><br><span class="line">SELECT * FROM employee ORDER BY age;</span><br><span class="line">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></tbody></table></figure><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询第一页数据，展示10条</span><br><span class="line">SELECT * FROM employee LIMIT 0, 10;</span><br><span class="line">-- 查询第二页</span><br><span class="line">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></tbody></table></figure><h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER mysql;</span><br><span class="line">SELECT * FROM user;</span><br></pre></td></tr></tbody></table></figure><p>创建用户:<br><code>CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';</code></p><p>修改用户密码：<br><code>ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';</code></p><p>删除用户：<br><code>DROP USER '用户名'@'主机名';</code></p><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 创建用户test，只能在当前主机localhost访问</span><br><span class="line">create user 'test'@'localhost' identified by '123456';</span><br><span class="line">-- 创建用户test，能在任意主机访问</span><br><span class="line">create user 'test'@'%' identified by '123456';</span><br><span class="line">create user 'test' identified by '123456';</span><br><span class="line">-- 修改密码</span><br><span class="line">alter user 'test'@'localhost' identified with mysql_native_password by '1234';</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user 'test'@'localhost';</span><br></pre></td></tr></tbody></table></figure><h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>主机名可以使用 % 通配</li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><p>更多权限请看<a href="#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8" title="权限一览表">权限一览表</a></p><p>查询权限：<br><code>SHOW GRANTS FOR '用户名'@'主机名';</code></p><p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';</code></p><p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';</code></p><h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><p>使用示例：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 拼接</span><br><span class="line">SELECT CONCAT('Hello', 'World');</span><br><span class="line">-- 小写</span><br><span class="line">SELECT LOWER('Hello');</span><br><span class="line">-- 大写</span><br><span class="line">SELECT UPPER('Hello');</span><br><span class="line">-- 左填充</span><br><span class="line">SELECT LPAD('01', 5, '-');</span><br><span class="line">-- 右填充</span><br><span class="line">SELECT RPAD('01', 5, '-');</span><br><span class="line">-- 去除空格</span><br><span class="line">SELECT TRIM(' Hello World ');</span><br><span class="line">-- 切片（起始索引为1）</span><br><span class="line">SELECT SUBSTRING('Hello World', 1, 5);</span><br></pre></td></tr></tbody></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- DATE_ADD</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></tbody></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case when age &gt; 30 then '中年' else '青年' end)</span><br><span class="line">from employee;</span><br><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case workaddress when '北京市' then '一线城市' when '上海市' then '一线城市' else '二线城市' end) as '工作地址'</span><br><span class="line">from employee;</span><br></pre></td></tr></tbody></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。</p><h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(10) not null unique,</span><br><span class="line">age int check(age &gt; 0 and age &lt; 120),</span><br><span class="line">status char(1) default '1',</span><br><span class="line">gender char(1)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>添加外键：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">...</span><br><span class="line">[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class="line">);</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class="line"></span><br><span class="line">-- 例子</span><br><span class="line">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br></pre></td></tr></tbody></table></figure><p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p><h4 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除/更新行为"></a>删除/更新行为</h4><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table><p>更改删除/更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p><blockquote><p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote><p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工姓名，及关联的部门的名称</span><br><span class="line">-- 隐式</span><br><span class="line">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class="line">-- 显式</span><br><span class="line">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></tbody></table></figure><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 左</span><br><span class="line">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class="line">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class="line">-- 右</span><br><span class="line">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br></pre></td></tr></tbody></table></figure><p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工及其所属领导的名字</span><br><span class="line">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class="line">-- 没有领导的也查询出来</span><br><span class="line">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></tbody></table></figure><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></tbody></table></figure><h4 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用or效率高，不会使索引失效</li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 查询销售部所有员工</span><br><span class="line">select id from dept where name = '销售部';</span><br><span class="line">-- 根据销售部部门ID，查询员工信息</span><br><span class="line">select * from employee where dept = 4;</span><br><span class="line">-- 合并（子查询）</span><br><span class="line">select * from employee where dept = (select id from dept where name = '销售部');</span><br><span class="line"></span><br><span class="line">-- 查询xxx入职之后的员工信息</span><br><span class="line">select * from employee where entrydate &gt; (select entrydate from employee where name = 'xxx');</span><br></pre></td></tr></tbody></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查询销售部和市场部的所有员工信息</span><br><span class="line">select * from employee where dept in (select id from dept where name = '销售部' or name = '市场部');</span><br><span class="line">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="line">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = '财务部'));</span><br><span class="line">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="line">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = '研发部'));</span><br></pre></td></tr></tbody></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class="line">select * from employee where (salary, manager) = (12500, 1);</span><br><span class="line">select * from employee where (salary, manager) = (select salary, manager from employee where name = 'xxx');</span><br></pre></td></tr></tbody></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class="line">select * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2');</span><br><span class="line">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class="line">select e.*, d.* from (select * from employee where entrydate &gt; '2006-01-01') as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></tbody></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- 1. 查询张三账户余额</span><br><span class="line">select * from account where name = '张三';</span><br><span class="line">-- 2. 将张三账户余额-1000</span><br><span class="line">update account set money = money - 1000 where name = '张三';</span><br><span class="line">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class="line">模拟sql语句错误</span><br><span class="line">-- 3. 将李四账户余额+1000</span><br><span class="line">update account set money = money + 1000 where name = '李四';</span><br><span class="line"></span><br><span class="line">-- 查看事务提交方式</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="line">SET @@AUTOCOMMIT = 0;</span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">-- 回滚事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 设置手动提交后上面代码改为：</span><br><span class="line">select * from account where name = '张三';</span><br><span class="line">update account set money = money - 1000 where name = '张三';</span><br><span class="line">update account set money = money + 1000 where name = '李四';</span><br><span class="line">commit;</span><br></pre></td></tr></tbody></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">select * from account where name = '张三';</span><br><span class="line">update account set money = money - 1000 where name = '张三';</span><br><span class="line">update account set money = money + 1000 where name = '李四';</span><br><span class="line">commit;</span><br></pre></td></tr></tbody></table></figure><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL体系结构：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png" alt="结构图" title="结构图"><br><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png" alt="层级描述" title="层级描述"></p><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p><p>相关操作：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查询建表语句</span><br><span class="line">show create table account;</span><br><span class="line">-- 建表时指定存储引擎</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">...</span><br><span class="line">) ENGINE=INNODB;</span><br><span class="line">-- 查看当前数据库支持的存储引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></tbody></table></figure><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量：<br><code>show variables like 'innodb_file_per_table';</code></p><p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE 'Com_______';</code> 或者 <code>SHOW SESSION STATUS LIKE 'Com_______';</code><br>例：<code>show global status like 'Com_______'</code></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log=1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time=2<br>更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p><p>查看慢查询日志开关状态：<br><code>show variables like 'slow_query_log';</code></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain / desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png" alt="二叉树" title="二叉树"></p><p>二叉树的缺点可以用红黑树来解决：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png" alt="红黑树" title="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png" alt="B-Tree结构" title="B-Tree结构"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png" alt="B+Tree结构图" title="B+Tree结构图"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png" alt="MySQL B+Tree 结构图" title="MySQL B+Tree 结构图"></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png" alt="Hash索引原理图" title="Hash索引原理图"></p><p>特点：</p><ul><li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>演示图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png" alt="大致原理" title="大致原理"><br><img src="https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png" alt="演示图" title="演示图"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id = 10;</span><br><span class="line">select * from user where name = 'Arm';</span><br><span class="line">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></tbody></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p><p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p><p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class="line">create index idx_user_name on tb_user(name);</span><br><span class="line">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class="line">create unique index idx_user_phone on tb_user (phone);</span><br><span class="line">-- 为profession, age, status创建联合索引</span><br><span class="line">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class="line">-- 为email建立合适的索引来提升查询效率</span><br><span class="line">create index idx_user_email on tb_user(email);</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">drop index idx_user_email on tb_user;</span><br></pre></td></tr></tbody></table></figure><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。</p><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = '15';</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like '%工程';</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession="软件工程";</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession="软件工程";</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession="软件工程";</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name='xxx';</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name='xxx';</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username='itcast';</code></p><p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct email) / count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></tbody></table></figure><p>show index 里面的sub_part可以看到接取的长度</p><h4 id="单列索引-amp-联合索引"><a href="#单列索引-amp-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = '17799990010' and name = '韩信';</code><br>这句只会用到phone索引字段</p><h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过1000条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">select @@local_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile '/root/sql1.log' into table 'tb_user' fields terminated by ',' lines terminated by '\n';</span><br></pre></td></tr></tbody></table></figure><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 此语句耗时很长</span><br><span class="line">select * from tb_sku limit 9000000, 10;</span><br><span class="line">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class="line">select id from tb_sku order by id limit 9000000, 10;</span><br><span class="line">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class="line">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class="line">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class="line">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></tbody></table></figure><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p><p>count的几种用法：</p><ul><li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p><h3 id="update优化（避免行锁升级为表锁）"><a href="#update优化（避免行锁升级为表锁）" class="headerlink" title="update优化（避免行锁升级为表锁）"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = '123' where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = '123' where name = 'test';</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8个字节</td></tr></tbody></table><p>无符号在数据类型后加 unsigned 关键字。</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;=M&lt;=255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)/8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table><h1 id="权限一览表"><a href="#权限一览表" class="headerlink" title="权限一览表"></a>权限一览表</h1><blockquote><p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档">官方文档</a></p></blockquote><p>GRANT 和 REVOKE 允许的静态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Grant Table Column</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td><td align="left">Synonym for “all privileges”</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td><td align="left"><code>Alter_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td><td align="left"><code>Alter_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td><td align="left"><code>Create_priv</code></td><td align="left">Databases, tables, or indexes</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td><td align="left"><code>Create_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td><td align="left"><code>Create_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td><td align="left"><code>Create_tablespace_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td><td align="left"><code>Create_tmp_table_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td><td align="left"><code>Create_user_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td><td align="left"><code>Create_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td><td align="left"><code>Delete_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td><td align="left"><code>Drop_priv</code></td><td align="left">Databases, tables, or views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td><td align="left"><code>Drop_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td><td align="left"><code>Event_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td><td align="left"><code>Execute_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td><td align="left"><code>File_priv</code></td><td align="left">File access on server host</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td><td align="left"><code>Grant_priv</code></td><td align="left">Databases, tables, or stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td><td align="left"><code>Index_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td><td align="left"><code>Insert_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td><td align="left"><code>Lock_tables_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td><td align="left"><code>Process_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td><td align="left">See <code>proxies_priv</code> table</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td><td align="left"><code>References_priv</code></td><td align="left">Databases or tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td><td align="left"><code>Reload_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td><td align="left"><code>Repl_client_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td><td align="left"><code>Repl_slave_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td><td align="left"><code>Select_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td><td align="left"><code>Show_db_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td><td align="left"><code>Show_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td><td align="left"><code>Shutdown_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td><td align="left"><code>Super_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td><td align="left"><code>Trigger_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td><td align="left"><code>Update_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td><td align="left">Synonym for “no privileges”</td><td align="left">Server administration</td></tr></tbody></table><p>GRANT 和 REVOKE 允许的动态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin"><code>APPLICATION_PASSWORD_ADMIN</code></a></td><td align="left">Dual password administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt"><code>AUDIT_ABORT_EXEMPT</code></a></td><td align="left">Allow queries blocked by audit log filter</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin"><code>AUDIT_ADMIN</code></a></td><td align="left">Audit log administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin"><code>BACKUP_ADMIN</code></a></td><td align="left">Backup administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin"><code>BINLOG_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin"><code>CLONE_ADMIN</code></a></td><td align="left">Clone administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin"><code>CONNECTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin"><code>ENCRYPTION_KEY_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin"><code>FIREWALL_ADMIN</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt"><code>FIREWALL_EXEMPT</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user"><code>FIREWALL_USER</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs"><code>FLUSH_OPTIMIZER_COSTS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status"><code>FLUSH_STATUS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables"><code>FLUSH_TABLES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources"><code>FLUSH_USER_RESOURCES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin"><code>GROUP_REPLICATION_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream"><code>GROUP_REPLICATION_STREAM</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td><td align="left">Redo log archiving administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user"><code>NDB_STORED_USER</code></a></td><td align="left">NDB Cluster</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin"><code>PASSWORDLESS_USER_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier"><code>REPLICATION_APPLIER</code></a></td><td align="left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin"><code>REPLICATION_SLAVE_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin"><code>RESOURCE_GROUP_ADMIN</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user"><code>RESOURCE_GROUP_USER</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin"><code>ROLE_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin"><code>SESSION_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id"><code>SET_USER_ID</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine"><code>SHOW_ROUTINE</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user"><code>SYSTEM_USER</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin"><code>SYSTEM_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin"><code>TABLE_ENCRYPTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin"><code>VERSION_TOKEN_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin"><code>XA_RECOVER_ADMIN</code></a></td><td align="left">Server administration</td></tr></tbody></table><h1 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h1><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ol><li>在SQL语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li><li>查看Mysql数据库占用空间：<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_schema "Database Name"</span><br><span class="line">     , SUM(data_length + index_length) / (1024 * 1024) "Database Size in MB"</span><br><span class="line">FROM information_schema.TABLES</span><br><span class="line">GROUP BY table_schema;</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础篇&quot;&gt;&lt;a href=&quot;#基础篇&quot; class=&quot;headerlink&quot; title=&quot;基础篇&quot;&gt;&lt;/a&gt;基础篇&lt;/h1&gt;&lt;h2 id=&quot;通用语法及分类&quot;&gt;&lt;a href=&quot;#通用语法及分类&quot; class=&quot;headerlink&quot; title=&quot;通用语法及分类</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>8-24</title>
    <link href="http://example.com/2023/09/18/8-12/"/>
    <id>http://example.com/2023/09/18/8-12/</id>
    <published>2023-09-18T02:49:50.353Z</published>
    <updated>2022-01-06T09:19:16.876Z</updated>
    
    <content type="html"><![CDATA[<p>8-12 的笔记8-24来传 懂的都懂<br>我又摸鱼了<br>循环<br>while（循环条件）<br>{<br>    循环体；<br>}<br>循环条件会经过判断形成true和false<br>来判断进不进行循环体的操作<br>最简单的循环体就是true<br>形成最简单的死循环</p><p>break：跳出当前循环；<br>跳出switch——case循环<br>break一般不单独使用<br>跟if判断一起使用</p><p>为什么我while里面的东西一直写反啊 干<br>do while循环<br>遇见首先执行一遍循环 拿执行后的结果判断是不是要循环的<br>用do-while循环<br>do<br>{<br>    循环体；<br>}while（循环条件）；<br>最少执行一遍循环体</p><p>**程序调试！！<br>1、写完程序 想看程序的执行过程<br>2、当你写完程序发现程序并没有按照想象样子执行</p><p>调试方法：<br>1、F11逐语句调试<br>2、F10逐过程调试<br>3、断点调试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;8-12 的笔记8-24来传 懂的都懂&lt;br&gt;我又摸鱼了&lt;br&gt;循环&lt;br&gt;while（循环条件）&lt;br&gt;{&lt;br&gt;    循环体；&lt;br&gt;}&lt;br&gt;循环条件会经过判断形成true和false&lt;br&gt;来判断进不进行循环体的操作&lt;br&gt;最简单的循环体就是true&lt;br&gt;形成最</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>古剑期间的c#(1)</title>
    <link href="http://example.com/2023/09/18/8-11/"/>
    <id>http://example.com/2023/09/18/8-11/</id>
    <published>2023-09-18T02:49:50.345Z</published>
    <updated>2022-01-06T09:19:16.874Z</updated>
    
    <content type="html"><![CDATA[<p>1.异常处理<br>    try-catch ：<br>try<br>{<br>    可能出现异常的代码；<br>}<br>catch<br>{<br>    出现异常之后要执行的代码；<br>}</p><p>2.变量的作用域<br>变量的作用域一般从声明的{}开始到这个括号的结束而结束</p><p>让代码满足某些条件去执行的话，使用bool类型</p><p>3.switch-case<br>多条件的定值的判断：<br>switch（变量或表达式的值）<br>{<br>    case 值1：要执行的代码；<br>     break；<br>    case 值2：要执行的代码；<br>     break；<br>    case 值3：要执行的代码；<br>     break；<br>    ………<br>    default：要执行的代码；<br>     break；<br>}<br>switch后面的值要与值1、2、3的值是一样得 如果是字符串要加“”</p><p>//有道题可以反复斟酌的<br>//在8-10本地文件中 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.异常处理&lt;br&gt;    try-catch ：&lt;br&gt;try&lt;br&gt;{&lt;br&gt;    可能出现异常的代码；&lt;br&gt;}&lt;br&gt;catch&lt;br&gt;{&lt;br&gt;    出现异常之后要执行的代码；&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;2.变量的作用域&lt;br&gt;变量的作用域一般从声明的{}开始到</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="http://example.com/2023/09/18/7.22/"/>
    <id>http://example.com/2023/09/18/7.22/</id>
    <published>2023-09-18T02:49:50.328Z</published>
    <updated>2023-09-19T07:04:17.475Z</updated>
    
    <content type="html"><![CDATA[<p>遇到不想遇到的<br>我唯一想到的只有<br>赶紧走<br>逃离这个镇<br>回避各忆<br>躲于角落<br>纵使身旁人 不知<br>何故<br>对曰<br>一眼可识两人<br>即为影<br>一拳可捶出吾 慌张姿态</p><p>两年成长似巨人<br>各类知识灌脑<br>看似冷静 且自信<br>为此<br>憾心振地<br>我为为我愿<br>我愿为了其未来生活<br>离开 逃避<br>他人眼中 吾<br>不可为丈夫<br>吾笑他 不懂社会复杂<br>无能力不可有情<br>无实力 不会有联系<br>无钱财 不会有完美生活</p><p>转眼<br>已拐入服饰店内<br>我依旧是我<br>她还是他 不忘 不见<br>我怅然大笑<br>眨眼 已是驾车远离<br>天空很蓝 太阳很耀眼<br>回想<br>百种汹涌<br>总有来由<br>万般历练<br>皆是生活</p><p><img src="/2023/09/18/7.22/%E6%BB%9A.jpg" alt="带祝滚"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;遇到不想遇到的&lt;br&gt;我唯一想到的只有&lt;br&gt;赶紧走&lt;br&gt;逃离这个镇&lt;br&gt;回避各忆&lt;br&gt;躲于角落&lt;br&gt;纵使身旁人 不知&lt;br&gt;何故&lt;br&gt;对曰&lt;br&gt;一眼可识两人&lt;br&gt;即为影&lt;br&gt;一拳可捶出吾 慌张姿态&lt;/p&gt;
&lt;p&gt;两年成长似巨人&lt;br&gt;各类知识灌脑&lt;br&gt;看</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2022-2-2 c#</title>
    <link href="http://example.com/2022/02/02/2022-2-2/"/>
    <id>http://example.com/2022/02/02/2022-2-2/</id>
    <published>2022-02-01T16:00:00.000Z</published>
    <updated>2022-02-03T13:01:43.217Z</updated>
    
    <content type="html"><![CDATA[<p>字符串提供的各种方法<br>（1）xxx.Length获得当前字符串中字符的个数<br>（2）xxx.ToUpper()转换成大写<br>         xxx.ToLower()转换成小写<br>（3）xxx.Equals(YYY)意思是xxx与yyy比较是否相同<br>        在yyy之后加入.StringComparation.OrdinalIgnoreCase比较可忽略大小写<br>（4）字符串的分割<br>定义一个string类型的字符串s，里面有+ - = 空格 abcd等字母<br>先定义一个char[] chs={‘+’，‘ ’，‘-’，‘=’，‘，’}；<br>把不需要的字符放进去<br>这个时候string[] str=s.Split(chs);<br>里面不需要的字符已经被干掉了，但是原来字符的位置都是空<br>需要在chs之后添加参数StringSplitOptions.RemoveEmptyEntries<br>string[] str=s.Split(chs,StringSplitOptions.RemoveEmptyEntries);<br>就只剩下我们需要的acbd等字符了<br>***但是我自己试了一下好像vs2019中自动默认去掉了空，不用参数直接就行！！！</p><hr><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string str = "国家关键人物老习";</span><br><span class="line">            if (str.Contains("习"))</span><br><span class="line">            {</span><br><span class="line">                str = str.Replace("习", "***");</span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine(str);</span><br><span class="line">            Console.ReadKey();</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Substring截取字符串"><a href="#Substring截取字符串" class="headerlink" title="Substring截取字符串"></a>Substring截取字符串</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string str = "相见争如不见，有情还似无情";</span><br><span class="line">            str = str.Substring(1, 3);</span><br><span class="line">            Console.WriteLine(str);</span><br><span class="line">            Console.ReadKey();</span><br></pre></td></tr></tbody></table></figure><p>这里1,3作为参数1代表第几个字符，3代表长度<br>如上代码输出为   –&gt;  见争如</p><p>xxx.StartWith(“从哪个开始的数”);<br>xxx.EndWith(“以哪个结束的数”);<br>返回的bool类型，用以判断</p><p>xxx.IndexOf(‘要找的字符’,寻找的起始位置); 返回int类型的值 找不到返回-1<br>xxx.LastIndexOf(‘出现在最后要找的字符’); 返回int类型的值 找不到返回-1</p><hr><h2 id="LastIndexOf与Substring"><a href="#LastIndexOf与Substring" class="headerlink" title="LastIndexOf与Substring"></a>LastIndexOf与Substring</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string path = @"c:\a\s\d\fd\gfsfwe\fwfw\fdw.word";</span><br><span class="line">            int index = path.LastIndexOf("\\");</span><br><span class="line">            path = path.Substring(index + 1);</span><br><span class="line">            Console.WriteLine(path);</span><br><span class="line">            Console.ReadKey();</span><br></pre></td></tr></tbody></table></figure><p>xxx.Trim()；用于去掉头和尾的空格<br>xxx.TrimStart()；用于去掉头的空格<br>xxx.TrimEnd()；用于去掉尾的空格<br>string.IsNullOrEmpty(要判断的字符串)用于判断是否为空/null<br>string.join（“用于分割的符号”,要处理的数组名或者将每个数组写进去因为是params）返回一个字符串</p><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>语法：<br>子类名：父类名<br>{<br>    方法体；<br>}<br>子类继承父类的属性和方法，不继承私有字段<br>继承的特性：<br>（1）单根型：一个子类只能有一个父类<br>（2）传递性<br>通常可以查看类图 比较清晰明了</p><p>子类没有继承父类的构造函数，但是子类会默认调用父类无参数的构造函数<br>，创建父类的对象，来让子类可以使用父类中的成员<br>在父类中写了一个有参数的构造函数，原来无参数的就被干掉了，调用不到，然后报错<br>解决办法：1）在父类中重新写一个无参数的构造函数<br>                 2）用关键字：base（）直接调用父类中有参数的构造函数</p><hr><p>new关键字<br>1）创建对象<br>2）隐藏从父类那里继承过来同名成员（子类调用不到父类的成员）</p><hr><h2 id="里氏转换"><a href="#里氏转换" class="headerlink" title="里氏转换"></a>里氏转换</h2><p>1）子类可以赋值给父类：如果有一个地方需要一个父类作为参数，我们可以给一个子类代替<br>student s=new student（）；<br>person p =s；<br>—–&gt;person p=new student（）；<br>2）如果父类中装的是子类对象 那么可以将这个父类强转为子类对象<br>student ss=（student）p；<br>ss.SayHello();<br>子类对象可以调用父类的成员，但是父类对象永远都只能调用自己的成员    </p><p>is:表示类型转换，如果能够转换成功，返回true否则就是false<br>as：表示类型转换，如果能转换则返回对应的对象，否则返回一个null</p><p>protected访问修饰符：可以在该类的内部以及该类的子类中进行访问</p><hr><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>数组：长度不可变，类型单一<br>集合：长度可以任意改变，类型随便<br>ArrayList list =new ArrayList（）;<br>list.Add（任意类型,最好是单个元素）  用for循环输出 长度为list.count<br>但是我们将一个对象打印到控制台，默认情况打印的是这个对象所在类的命名空间<br>list.AddRange（添加集合元素）;<br>list.Clear();移除所有元素<br>list.Remove();移除单个元素，写谁删谁<br>list.RemoveAt();根据下标删除元素<br>list.RemoveRange();根据下标删除一定范围的元素<br>list.Sort();升序排列<br>list.Reverse();反转<br>list.Insert(位置,元素);插入单个元素<br>list.InsertRange(位置，集合);插入集合<br>bool x=list.contains（）；是否包含某个指定的元素</p><p>ArrayList长度问题<br>count：表示这个集合中实际包含元素的个数<br>capacity：表示这个集合中可以包含元素的个数<br>当count超过capacity，集合就会向内存申请多开辟一倍的空间，来保证集合的长度一直够用</p><hr><h2 id="hashtable键值对集合"><a href="#hashtable键值对集合" class="headerlink" title="hashtable键值对集合"></a>hashtable键值对集合</h2><p>hashtable th=new hashtable（）；<br>th.Add(键，值);<br>th[键]=值；<br>输出键值对循环需要用到foreach循环<br>foreach（var item in xx）<br>{<br>    方法体；<br>}</p><hr><h2 id="path类"><a href="#path类" class="headerlink" title="path类"></a>path类</h2><p>快速获得一个路径下文件的名字 Path.GetFileName();<br>获得文件名但是不包含扩展名Path.GetFileNameWithoutExtension();<br>直接获得文件的扩展名Path.GetExtension();<br>获得文件所在的文件夹的名称Path.GetDirectoryName();<br>获得文件所在的全路径Path.GetFullPath();</p><hr><h2 id="file类"><a href="#file类" class="headerlink" title="file类"></a>file类</h2><p>在某路径创建文件File.Create(@”路径\文件名”);<br>同理file.delete();<br>复制一个文件File.Copy(@”路径\文件名”,@”路径\新文件名”);<br>1024byte=1kb<br>1024kb=1M<br>1024M=1G<br>1024G=1T<br>1024T=1PT</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;字符串提供的各种方法&lt;br&gt;（1）xxx.Length获得当前字符串中字符的个数&lt;br&gt;（2）xxx.ToUpper()转换成大写&lt;br&gt;         xxx.ToLower()转换成小写&lt;br&gt;（3）xxx.Equals(YYY)意思是xxx与yyy比较是否相同&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2022-2-1</title>
    <link href="http://example.com/2022/02/01/2022-2-1/"/>
    <id>http://example.com/2022/02/01/2022-2-1/</id>
    <published>2022-01-31T16:00:00.000Z</published>
    <updated>2022-02-01T16:07:47.969Z</updated>
    
    <content type="html"><![CDATA[<hr><p>假定s为string类型数组<br>可以使用s.tochararray（）；将其改变为char类型的数组<br>这样就可以修改一个string类型的部分值<br>因为string类型可以看做是char类型的只读数组<br>比如chs为新的char类型的字符<br>但是这个时候s并没有改变 需要我们将字符数组转换成字符串<br>s = new string（chs）；、<br>这个时候s就改变了<br>（这个东西没什么大用）</p><hr><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace _2022_2_1</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            string str = null;</span><br><span class="line">            Stopwatch sw = new Stopwatch();</span><br><span class="line">            sw.Start();</span><br><span class="line">            for (int i = 0; i &lt; 100000; i++)</span><br><span class="line">            {</span><br><span class="line">                //str += i;</span><br><span class="line">                sb.Append(i);</span><br><span class="line">            }</span><br><span class="line">            sw.Stop();</span><br><span class="line">            Console.WriteLine(sw.Elapsed);</span><br><span class="line">            Console.WriteLine(sb.ToString());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="新年好"><a href="#新年好" class="headerlink" title="新年好"></a>新年好</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;假定s为string类型数组&lt;br&gt;可以使用s.tochararray（）；将其改变为char类型的数组&lt;br&gt;这样就可以修改一个string类型的部分值&lt;br&gt;因为string类型可以看做是char类型的只读数组&lt;br&gt;比如chs为新的char类型的字符&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2022-1-30</title>
    <link href="http://example.com/2022/01/30/2022-1-30/"/>
    <id>http://example.com/2022/01/30/2022-1-30/</id>
    <published>2022-01-29T16:00:00.000Z</published>
    <updated>2022-01-31T17:28:13.300Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>写一个ticket类，有一个距离属性（本属性只读，在构造方法中赋值）<br>不能为负数，有一个价格属性，价格属性只读<br>并且根据距离distance计算价格price（1元/公里）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">namespace _2022_1_30</span><br><span class="line">{</span><br><span class="line">     public class Ticket</span><br><span class="line">    {</span><br><span class="line">        private double _distance;</span><br><span class="line"></span><br><span class="line">        public double Distance</span><br><span class="line">        {</span><br><span class="line">            get </span><br><span class="line">            { </span><br><span class="line">                return _distance; </span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        public Ticket(double distance)</span><br><span class="line">        {</span><br><span class="line">            if (distance &lt; 0)</span><br><span class="line">            {</span><br><span class="line">                distance = 0;</span><br><span class="line">            }</span><br><span class="line">            this._distance = distance;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        private double _price;</span><br><span class="line"></span><br><span class="line">        public double Price</span><br><span class="line">        {</span><br><span class="line">            get </span><br><span class="line">            {</span><br><span class="line">                if (_distance &gt; 0 &amp;&amp; _distance &lt;= 100) { return _distance * 1.0; }</span><br><span class="line">                else if (_distance &gt; 100 &amp;&amp; _distance &lt;= 200) { return _distance * 0.95; }</span><br><span class="line">                else if (_distance &gt; 200 &amp;&amp; _distance &lt;= 300) { return _distance * 0.9; }</span><br><span class="line">                else { return _distance * 0.8; }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        public void Calculate() { Console.WriteLine("这次乘车需要花费{0}元",Price); }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace _2022_1_30</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            Ticket car = new Ticket(198);</span><br><span class="line">            car.Calculate();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>用于解决类的重名问题，可以看做“类的文件夹”<br>就类似于java的包<br>如果没有此命名空间可以：<br>1.鼠标点，提示方块<br>2.alt+shift+f10</p><p>在一个项目中引用另一个项目的类<br>1.添加引用<br>2.引用命名空间</p><p>值类型和引用类型<br>区别：<br>1、值类型和引用类型在内存上存储的地方不一样<br>2、在传递值类型和传递引用类型的时候，传递的方式不一样<br>值类型：值传递，引用类型：引用传递<br>值类型：int double bool decimal char enum struct<br>引用类型：string 自定义类<br>值类型存储在内存的栈当中<br>引用类型存储在内存的堆当中</p><p>字符串的不可变性<br>：给一个字符串重新赋值之后，老值并没销毁，而是开辟一个新的空间存储新值<br>当程序结束之后，GC扫描整个程序，发现没有使用到的就会销毁<br>GC=garbage collection垃圾回收器</p><hr><h2 id="！！新年快乐！！"><a href="#！！新年快乐！！" class="headerlink" title="！！新年快乐！！"></a>！！新年快乐！！</h2><hr><h2 id="！！祝大家虎年大吉-吧！！"><a href="#！！祝大家虎年大吉-吧！！" class="headerlink" title="！！祝大家虎年大吉 吧！！"></a>！！祝大家虎年大吉 吧！！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;练习&quot;&gt;&lt;a href=&quot;#练习&quot; class=&quot;headerlink&quot; title=&quot;练习&quot;&gt;&lt;/a&gt;练习&lt;/h2&gt;&lt;p&gt;写一个ticket类，有一个距离属性（本属性只读，在构造方法中赋值）&lt;br&gt;不能为负数，有一个价格属性，价格属性只读&lt;br&gt;并且根</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2022-1-29</title>
    <link href="http://example.com/2022/01/29/2022-1-29/"/>
    <id>http://example.com/2022/01/29/2022-1-29/</id>
    <published>2022-01-28T16:00:00.000Z</published>
    <updated>2022-01-29T16:25:31.457Z</updated>
    
    <content type="html"><![CDATA[<p>静态与非静态区别：<br>（1）在非静态类中，既可以有实例成员，也可以有静态成员<br>（2）在调用实例成员的时候，需要使用对象名.实例成员;<br>         在调用静态成员的时候，需要使用类名.静态成员名;<br>总结：静态成员必须使用类名去调用，而实例成员使用对象名去调用<br>          静态函数中只允许访问静态成员，不允许访问实例成员<br>          实例函数中既可以使用静态成员，也可以使用实例成员<br>          静态类中只允许出现静态成员，不允许出现实例成员<br>使用：（1）如果你想要你的类当做一个工具类去使用，可以考虑将类写成静态类（console）<br>          （2）静态类在项目中资源共享</p><hr><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>作用：帮助我们初始化对象（给对象的每个属性依次的赋值）<br>构造函数是一个特殊的方法<br>1）构造函数没有返回值，void也不写<br>2）构造函数的名字要求与类名相同<br>创建对象的时候会执行构造函数<br>构造函数是可以用重载的</p><hr><h2 id="关键字new"><a href="#关键字new" class="headerlink" title="关键字new"></a>关键字new</h2><p>比如 Person A=new Person（）；<br>new做了三件事<br>（1）在内存中开辟空间<br>（2）在开辟的空间中创建对象<br>（3）调用对象的构造函数进行初始化对象</p><hr><h2 id="关键字this"><a href="#关键字this" class="headerlink" title="关键字this"></a>关键字this</h2><p>（1）代表当前类的对象<br>（2）在类当中显示的调用本类的构造函数 ：this</p><hr><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>~Student（）<br>{<br>    方法体；<br>}<br>当程序结束的时候才执行<br>一般是帮助我们释放资源~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;静态与非静态区别：&lt;br&gt;（1）在非静态类中，既可以有实例成员，也可以有静态成员&lt;br&gt;（2）在调用实例成员的时候，需要使用对象名.实例成员;&lt;br&gt;         在调用静态成员的时候，需要使用类名.静态成员名;&lt;br&gt;总结：静态成员必须使用类名去调用，而实例成员使用对</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2022-1-28</title>
    <link href="http://example.com/2022/01/28/2022-1-28/"/>
    <id>http://example.com/2022/01/28/2022-1-28/</id>
    <published>2022-01-27T16:00:00.000Z</published>
    <updated>2022-01-28T16:11:28.685Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象：意在写出一个通用的代码，屏蔽差异<br>类就是个模子，确定了对象应该具有的属性和方法<br>当我们创好一个类后，需要给这个对象的每个属性去赋值，我们管这个过程称之为对象的初始化</p><hr><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>语法：<br>[public] class 类名<br>{<br>    字段；<br>    属性；<br>    方法；<br>}<br>写完类需要创建对象，创建对象的过程称之为类的实例化<br>使用关键字 new<br>this：当前这个类的对象<br>类是不占内存的，对象（字段）是占内存的</p><hr><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>属性的作用就是保护字段，对字段的赋值和取值进行限定<br>属性的本质就是两个方法，一个是get（），一个是set（）<br>既有get也有set称之为可读可写<br>只有get称为只读<br>只有set称为只写<br>一般用属性给类的对象赋值，赋的值最后也是给到字段</p><hr><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>public 公开的<br>private：私有的 ，只能在当前类的内部进行访问</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;面向对象：意在写出一个通用的代码，屏蔽差异&lt;br&gt;类就是个模子，确定了对象应该具有的属性和方法&lt;br&gt;当我们创好一个类后，需要给这个对象的每个属性去赋值，我们管这个过程称之为对象的初始化&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;hea</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>硬核飞行棋</title>
    <link href="http://example.com/2022/01/24/2022-1-24/"/>
    <id>http://example.com/2022/01/24/2022-1-24/</id>
    <published>2022-01-23T16:00:00.000Z</published>
    <updated>2022-01-24T09:20:38.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最近偷懒了"><a href="#最近偷懒了" class="headerlink" title="最近偷懒了"></a>最近偷懒了</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace feixingqi</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        public static int[] Maps = new int[100];</span><br><span class="line">        //静态变量模拟全局变量</span><br><span class="line">        public static int[] PlayerPos = new int[2];</span><br><span class="line">        //声明一个静态数组用来存储玩家A与玩家B坐标</span><br><span class="line">        public static string[] PlayerNames = new string[2];</span><br><span class="line">        //存储两个玩家的姓名</span><br><span class="line">        public static bool[] Flags = new bool[2];</span><br><span class="line">        //两个玩家的标记</span><br><span class="line"></span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            GameShow();</span><br><span class="line">            #region 输入玩家姓名</span><br><span class="line">            Console.WriteLine("请输入玩家a的姓名");</span><br><span class="line">            PlayerNames[0] = Console.ReadLine();</span><br><span class="line">            while (PlayerNames[0] == "")</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine("玩家a的姓名不能为空，请重新输入");</span><br><span class="line">                PlayerNames[0] = Console.ReadLine();</span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine("请输入玩家b的姓名");</span><br><span class="line">            PlayerNames[1] = Console.ReadLine();</span><br><span class="line">            while (PlayerNames[1] == "" || PlayerNames[1] == PlayerNames[0])</span><br><span class="line">            {</span><br><span class="line">                if (PlayerNames[1] == "")</span><br><span class="line">                {</span><br><span class="line">                    Console.WriteLine("玩家b的姓名不能为空，请重新输入");</span><br><span class="line">                    PlayerNames[1] = Console.ReadLine();</span><br><span class="line">                }</span><br><span class="line">                else</span><br><span class="line">                {</span><br><span class="line">                    Console.WriteLine("玩家b的姓名不能与玩家a的姓名相同，请重新输入");</span><br><span class="line">                    PlayerNames[1] = Console.ReadLine();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            #endregion</span><br><span class="line">            //玩家输入完姓名之后应该先清屏</span><br><span class="line">            Console.Clear();//清屏</span><br><span class="line">            GameShow();</span><br><span class="line">            Console.WriteLine("{0}的士兵用A表示",PlayerNames[0]);</span><br><span class="line">            Console.WriteLine("{0}的士兵用B表示", PlayerNames[1]);</span><br><span class="line">            //画地图之前应该先初始化地图</span><br><span class="line">            InitialMap();</span><br><span class="line">            DrawMap();</span><br><span class="line"></span><br><span class="line">            while (PlayerPos[0] &lt;99 &amp;&amp; PlayerPos[1] &lt; 99)</span><br><span class="line">            {</span><br><span class="line">                if (Flags[0] == false) { PlayGame(0); }</span><br><span class="line">                else</span><br><span class="line">                {</span><br><span class="line">                    Flags[0] = false;</span><br><span class="line">                }</span><br><span class="line">                if (PlayerPos[0] &gt;= 99)</span><br><span class="line">                {</span><br><span class="line">                    Console.WriteLine("玩家{0}赢了",PlayerNames[0]);</span><br><span class="line">                    break;</span><br><span class="line">                }</span><br><span class="line">                if (Flags[1] == false) { PlayGame(1); }</span><br><span class="line">                {</span><br><span class="line">                    Flags[1] = false;</span><br><span class="line">                }</span><br><span class="line">                if (PlayerPos[1] &gt;= 99)</span><br><span class="line">                {</span><br><span class="line">                    Console.WriteLine("玩家{0}赢了", PlayerNames[1]);</span><br><span class="line">                    break;</span><br><span class="line">                }</span><br><span class="line">            }//while</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 画游戏头</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public static void GameShow()</span><br><span class="line">        {</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.Green;</span><br><span class="line">            Console.WriteLine("*********************");</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class="line">            Console.WriteLine("*********************");</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.DarkGray;</span><br><span class="line">            Console.WriteLine("*********************");</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.Blue;</span><br><span class="line">            Console.WriteLine("*****硬核飞行棋******");</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.Cyan;</span><br><span class="line">            Console.WriteLine("*********************");</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.White;</span><br><span class="line">            Console.WriteLine("*********************");</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.DarkBlue;</span><br><span class="line">            Console.WriteLine("*********************");</span><br><span class="line">        }</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 初始化地图</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public static void InitialMap()</span><br><span class="line">        {</span><br><span class="line">            int[] Luckyturn = { 6, 23, 40,55, 69, 83 };</span><br><span class="line">            for (int i = 0; i &lt; Luckyturn.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                //int index = Luckyturn[i];</span><br><span class="line">                Maps[Luckyturn[i]] = 1;</span><br><span class="line">            }</span><br><span class="line">            int[] Landmine = { 5, 13, 17, 33, 38, 50, 64, 80, 94 };</span><br><span class="line">            for (int i = 0; i &lt; Landmine.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                Maps[Landmine[i]] = 2;</span><br><span class="line">            }</span><br><span class="line">            int[] Pause = { 9, 27, 60, 93 };</span><br><span class="line">            for (int i = 0; i &lt; Pause.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                Maps[Pause[i]] = 3;</span><br><span class="line">            }</span><br><span class="line">            int[] TimeTunnel = { 20, 25, 45, 63, 72, 88, 90 };</span><br><span class="line">            for (int i = 0; i &lt; TimeTunnel.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                Maps[TimeTunnel[i]] = 4;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        public static void DrawMap()</span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine("图例:幸运轮盘:◎   地雷:☆   暂停:▲   时空隧道:卐");</span><br><span class="line">            #region 第一横行</span><br><span class="line">            for (int i = 0; i &lt; 30; i++)</span><br><span class="line">            {   //玩家A与玩家B坐标相同，都在地图上，画一个尖括号</span><br><span class="line">                Console.Write(DrawStringMap(i));</span><br><span class="line">            }//for</span><br><span class="line"> #endregion</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            #region 第一竖行</span><br><span class="line">            for (int i = 30; i &lt; 35; i++)</span><br><span class="line">            {</span><br><span class="line">                for (int j = 0; j &lt;= 28; j++)</span><br><span class="line">                {</span><br><span class="line">                    Console.Write("  ");</span><br><span class="line">                }</span><br><span class="line">                Console.Write(DrawStringMap(i));</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">            }</span><br><span class="line">            #endregion</span><br><span class="line">            #region 第二横行</span><br><span class="line">            for (int i = 64; i &gt;= 35; i--)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(DrawStringMap(i));</span><br><span class="line">                //画完第二横行应该换行</span><br><span class="line">            }</span><br><span class="line">            #endregion</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            #region 第二竖行</span><br><span class="line">            for (int i = 65; i &lt;=69; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(DrawStringMap(i));</span><br><span class="line">            }</span><br><span class="line">            #endregion</span><br><span class="line">            #region 第三横行</span><br><span class="line">            for (int i = 70; i &lt;=99; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.Write(DrawStringMap(i));</span><br><span class="line">            }</span><br><span class="line">            #endregion</span><br><span class="line">            //画完最后一行，应该换行</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        }</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 从画地图中抽象出来的一个方法</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name="i"&gt;&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">        public static string DrawStringMap(int i)</span><br><span class="line">        {</span><br><span class="line">            string str = "";</span><br><span class="line">            if (PlayerPos[0] == PlayerPos[1] &amp;&amp; PlayerPos[1] == i)</span><br><span class="line">            {</span><br><span class="line">                Console.ForegroundColor = ConsoleColor.DarkYellow;</span><br><span class="line">                str = "&lt;&gt;";</span><br><span class="line">            }</span><br><span class="line">            else if (PlayerPos[0] == i)</span><br><span class="line">            {</span><br><span class="line">                str = "A";</span><br><span class="line">            }</span><br><span class="line">            else if (PlayerPos[1] == i)</span><br><span class="line">            {</span><br><span class="line">                str = "B";</span><br><span class="line">            }</span><br><span class="line">            else</span><br><span class="line">            {</span><br><span class="line">                switch (Maps[i])</span><br><span class="line">                {</span><br><span class="line">                    case 0:</span><br><span class="line">                        Console.ForegroundColor = ConsoleColor.Red;</span><br><span class="line">                        str = "□"; break;</span><br><span class="line">                    case 1:</span><br><span class="line">                        Console.ForegroundColor = ConsoleColor.DarkMagenta;</span><br><span class="line">                        str = "◎"; break;</span><br><span class="line">                    case 2:</span><br><span class="line">                        Console.ForegroundColor = ConsoleColor.DarkRed;</span><br><span class="line">                        str = "☆"; break;</span><br><span class="line">                    case 3:</span><br><span class="line">                        Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class="line">                        str = "▲"; break;</span><br><span class="line">                    case 4:</span><br><span class="line">                        Console.ForegroundColor = ConsoleColor.Green;</span><br><span class="line">                        str = "卐"; break;</span><br><span class="line">                }//switch</span><br><span class="line">            }//else</span><br><span class="line">            return str;</span><br><span class="line">        }</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 玩游戏</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public static void PlayGame(int PlayerNumber)</span><br><span class="line">        {</span><br><span class="line">            Random r = new Random();</span><br><span class="line">            int rNumber = r.Next(1, 7);</span><br><span class="line">            Console.WriteLine("{0}按任意键开始掷骰子", PlayerNames[PlayerNumber]);</span><br><span class="line">            Console.ReadKey(true);</span><br><span class="line">            Console.WriteLine("{0}掷出了{1}", PlayerNames[PlayerNumber], rNumber);</span><br><span class="line">            PlayerPos[PlayerNumber] += rNumber;</span><br><span class="line">            ChangePos();</span><br><span class="line">            Console.ReadKey(true);</span><br><span class="line">            Console.WriteLine("{0}按任意键开始行动", PlayerNames[PlayerNumber]);</span><br><span class="line">            Console.ReadKey(true);</span><br><span class="line">            Console.WriteLine("{0}行动完了", PlayerNames[PlayerNumber]);</span><br><span class="line">            Console.ReadKey(true);</span><br><span class="line">            //玩家a可能踩到玩家b，方块 幸运轮盘 地雷 暂停 时空隧道</span><br><span class="line">            if (PlayerPos[PlayerNumber] == PlayerPos[1- PlayerNumber])</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine("玩家{0}踩到了玩家{1},玩家{2}退六格", PlayerPos[PlayerNumber], PlayerPos[1- PlayerNumber], PlayerPos[1- PlayerNumber]);</span><br><span class="line">                PlayerPos[1- PlayerNumber] -= 6;</span><br><span class="line">                ChangePos();</span><br><span class="line">                Console.ReadKey(true);</span><br><span class="line">            }</span><br><span class="line">            else</span><br><span class="line">            {</span><br><span class="line">                switch (Maps[PlayerPos[PlayerNumber]])</span><br><span class="line">                {</span><br><span class="line">                    case 0:</span><br><span class="line">                        Console.WriteLine("玩家{0}踩到了方块，安全", PlayerNames[PlayerNumber]);</span><br><span class="line">                        Console.ReadKey();</span><br><span class="line">                        break;</span><br><span class="line">                    case 1:</span><br><span class="line">                        Console.WriteLine("玩家{0}踩到了幸运轮盘，1--交换位置，2--轰炸对方，退六格", PlayerNames[PlayerNumber]);</span><br><span class="line">                        string input = Console.ReadLine();</span><br><span class="line">                        while (true)</span><br><span class="line">                        {</span><br><span class="line">                            if (input == "1")</span><br><span class="line">                            {</span><br><span class="line">                                Console.WriteLine("玩家{0}选择跟玩家{1}交换位置", PlayerNames[PlayerNumber], PlayerNames[1- PlayerNumber]);</span><br><span class="line">                                Console.ReadKey(true);</span><br><span class="line">                                int temp = PlayerPos[PlayerNumber];</span><br><span class="line">                                PlayerPos[PlayerNumber] = PlayerPos[1- PlayerNumber];</span><br><span class="line">                                PlayerPos[1- PlayerNumber] = temp;</span><br><span class="line">                                Console.WriteLine("交换成功,按任意键继续游戏");</span><br><span class="line">                                Console.ReadKey(true);</span><br><span class="line">                                break;</span><br><span class="line">                            }</span><br><span class="line">                            else if (input == "2")</span><br><span class="line">                            {</span><br><span class="line">                                Console.WriteLine("玩家{0}选择轰炸玩家{1}，玩家{2}退六格", PlayerNames[PlayerNumber], PlayerNames[1- PlayerNumber], PlayerNames[1- PlayerNumber]);</span><br><span class="line">                                Console.ReadKey(true);</span><br><span class="line">                                PlayerPos[1- PlayerNumber] -= 6;</span><br><span class="line">                                ChangePos();</span><br><span class="line">                                Console.WriteLine("玩家{0}退了六格", PlayerNames[1-PlayerNumber]);</span><br><span class="line">                                Console.ReadKey(true);</span><br><span class="line">                                break;</span><br><span class="line">                            }</span><br><span class="line">                            else</span><br><span class="line">                            {</span><br><span class="line">                                Console.WriteLine("只能输入1和2，1--交换位置，2--轰炸对方，退六格,请重新输入");</span><br><span class="line">                                input = Console.ReadLine();</span><br><span class="line">                            }</span><br><span class="line">                        }</span><br><span class="line">                        break;</span><br><span class="line">                    case 2:</span><br><span class="line">                        Console.WriteLine("玩家{0}踩到了地雷，退六格", PlayerNames[PlayerNumber]);</span><br><span class="line">                        Console.ReadKey(true);</span><br><span class="line">                        PlayerPos[PlayerNumber] -= 6;</span><br><span class="line">                        ChangePos();</span><br><span class="line">                        break;</span><br><span class="line">                    case 3:</span><br><span class="line">                        Console.WriteLine("玩家{0}踩到了暂停，暂停一回合", PlayerNames[PlayerNumber]);</span><br><span class="line">                        Flags[PlayerNumber] = true;</span><br><span class="line">                        Console.ReadKey(true);</span><br><span class="line">                        break;</span><br><span class="line">                    case 4:</span><br><span class="line">                        Console.WriteLine("玩家{0}踩到了时空隧道，前进十格", PlayerNames[PlayerNumber]);</span><br><span class="line">                        PlayerPos[PlayerNumber] += 10;</span><br><span class="line">                        ChangePos();</span><br><span class="line">                        Console.ReadKey(true);</span><br><span class="line">                        break;</span><br><span class="line">                }//switch</span><br><span class="line">            }//else</span><br><span class="line">            ChangePos();</span><br><span class="line">            Console.Clear();</span><br><span class="line">            DrawMap();</span><br><span class="line">        }</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 当玩家的坐标发生改变的时候调用</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        public static void ChangePos()</span><br><span class="line">        {</span><br><span class="line">            if (PlayerPos[0] &lt; 0)</span><br><span class="line">            {</span><br><span class="line">                PlayerPos[0] = 0;</span><br><span class="line">            }</span><br><span class="line">            if (PlayerPos[0] &gt;= 99)</span><br><span class="line">            {</span><br><span class="line">                PlayerPos[0] = 99;</span><br><span class="line">            }</span><br><span class="line">            if (PlayerPos[1] &lt; 0)</span><br><span class="line">            {</span><br><span class="line">                PlayerPos[1] = 0;</span><br><span class="line">            }</span><br><span class="line">            if (PlayerPos[1] &gt;= 99)</span><br><span class="line">            {</span><br><span class="line">                PlayerPos[1] = 99;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">//□◎☆▲卐 拿去复制</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;最近偷懒了&quot;&gt;&lt;a href=&quot;#最近偷懒了&quot; class=&quot;headerlink&quot; title=&quot;最近偷懒了&quot;&gt;&lt;/a&gt;最近偷懒了&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2022-1-8</title>
    <link href="http://example.com/2022/01/08/2022-1-8/"/>
    <id>http://example.com/2022/01/08/2022-1-8/</id>
    <published>2022-01-07T16:00:00.000Z</published>
    <updated>2022-01-24T09:15:41.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写一个跟try-parse一样性质的方法"><a href="#写一个跟try-parse一样性质的方法" class="headerlink" title="写一个跟try-parse一样性质的方法"></a>写一个跟try-parse一样性质的方法</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">namespace _2022_2_3</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            int num;</span><br><span class="line">            bool b = int.TryParse("123", out num);</span><br><span class="line">            Console.WriteLine(num);</span><br><span class="line">            Console.WriteLine(b);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        public static bool MyTryParse(string s,out int result)</span><br><span class="line">        {</span><br><span class="line">            result = 0;</span><br><span class="line">            try</span><br><span class="line">            {</span><br><span class="line">                result = Convert.ToInt32(s);</span><br><span class="line">                return true;</span><br><span class="line">            }</span><br><span class="line">            catch</span><br><span class="line">            {</span><br><span class="line">                return false;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="ref参数"><a href="#ref参数" class="headerlink" title="ref参数"></a>ref参数</h2><p>能够将一个变量带入一个方法中进行改变<br>改变完成后，能将改变后的数带出方法<br>参数要求在方法外必须为其赋值，而方法内可以不赋值</p><hr><h2 id="ref参数练习"><a href="#ref参数练习" class="headerlink" title="ref参数练习"></a>ref参数练习</h2><p>使用方法交换两个int类型的变量</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">namespace _2022_2_3</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            int n1 = 10;</span><br><span class="line">            int n2 = 20;</span><br><span class="line">            Change(ref n1,ref n2);</span><br><span class="line">            Console.WriteLine("{0}，{1}",n1,n2);</span><br><span class="line">        }</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 交换两个int类型的数</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name="n1"&gt;第一个数&lt;/param&gt;</span><br><span class="line">        /// &lt;param name="n2"&gt;第二个数&lt;/param&gt;        </span><br><span class="line">        public static void Change(ref int n1,ref int n2)</span><br><span class="line">        {</span><br><span class="line">            n1 = n1 - n2;</span><br><span class="line">            n2 = n1 + n2;</span><br><span class="line">            n1 = n2 - n1;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="params可变参数"><a href="#params可变参数" class="headerlink" title="params可变参数"></a>params可变参数</h2><p>将实参列表中跟可变参数数组类型一致的元素都当做数组的元素来处理<br>params可变参数必须是形参类表中最后一个元素<br>具有唯一性</p><hr><h2 id="params参数练习"><a href="#params参数练习" class="headerlink" title="params参数练习"></a>params参数练习</h2><p>求任意长度数组的和 整数类型的</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace _2022_1_6</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line"></span><br><span class="line">            int sum = GetSum(1, 2, 3, 4, 5);</span><br><span class="line">            Console.WriteLine(sum);</span><br><span class="line">        }</span><br><span class="line">        public static int GetSum(params int[] n)</span><br><span class="line">        {</span><br><span class="line">            int sum = 0;</span><br><span class="line">            for (int i = 0; i &lt; n.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                sum += n[i];</span><br><span class="line">            }</span><br><span class="line">            return sum;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>方法的重载指的是方法的名称相同但是方法的参数不同<br>分两种情况：参数个数相同，参数类型就不能相同<br>        参数类型相同，参数个数就不能相同<br>跟方法的返回值无关</p><hr><h2 id="方法的递归：方法自己调用自己"><a href="#方法的递归：方法自己调用自己" class="headerlink" title="方法的递归：方法自己调用自己"></a>方法的递归：方法自己调用自己</h2><h2 id="方法的总和练习"><a href="#方法的总和练习" class="headerlink" title="方法的总和练习"></a>方法的总和练习</h2><p>提示用户输入两个数字，计算这两个数字之间所有整数的和<br>1用户只能输入数字<br>2计算两个数字之间的和<br>3要求第一个数字必须比第二个数字小，就重新输入</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace _2022_1_8</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            //提示用户输入两个数字，计算这两个数字之间所有整数的和</span><br><span class="line">            //1用户只能输入数字</span><br><span class="line">            //2计算两个数字之间的和</span><br><span class="line">            //3要求第一个数字必须比第二个数字小，就重新输入</span><br><span class="line">            Console.WriteLine("请输入第一个数");</span><br><span class="line">            string NumberOne = Console.ReadLine();</span><br><span class="line">            int numberone = GetNumber(NumberOne);</span><br><span class="line">            Console.WriteLine("请输入第二个数");</span><br><span class="line">            string NumberTwo = Console.ReadLine();</span><br><span class="line">            int numbertwo = GetNumber(NumberTwo);</span><br><span class="line">            JudgeNumber(ref numberone, ref numbertwo);</span><br><span class="line">            int sum = GetSum(numberone, numbertwo);</span><br><span class="line">            Console.WriteLine(sum);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        public static int GetNumber(string s)</span><br><span class="line">        {</span><br><span class="line">            while (true)</span><br><span class="line">            {</span><br><span class="line">                try</span><br><span class="line">                {</span><br><span class="line">                    int number = Convert.ToInt32(s);</span><br><span class="line">                    return number;</span><br><span class="line">                }</span><br><span class="line">                catch</span><br><span class="line">                {</span><br><span class="line">                    Console.WriteLine("输入有误！！请重新输入数字");</span><br><span class="line">                    s = Console.ReadLine();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        public static void JudgeNumber(ref int n1,ref int n2)</span><br><span class="line">        {</span><br><span class="line">            while (true)</span><br><span class="line">            {</span><br><span class="line">                if (n1 &lt; n2)</span><br><span class="line">                {</span><br><span class="line">                    return;</span><br><span class="line">                }</span><br><span class="line">                else</span><br><span class="line">                {</span><br><span class="line">                    Console.WriteLine("第一个数字不能大于第二个数字，请重新输入");</span><br><span class="line">                    string s1 = Console.ReadLine();</span><br><span class="line">                    n1 = GetNumber(s1);</span><br><span class="line">                    Console.WriteLine("请重新输入第二个数字");</span><br><span class="line">                    string s2 = Console.ReadLine();</span><br><span class="line">                    n2 = GetNumber(s2);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">        public static int GetSum(int n1,int n2)</span><br><span class="line">        {</span><br><span class="line">            int sum = 0;</span><br><span class="line">            for (int i = n1; i &lt;= n2; i++)</span><br><span class="line">            {</span><br><span class="line">                sum += i;</span><br><span class="line">            }</span><br><span class="line">            return sum;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写一个跟try-parse一样性质的方法&quot;&gt;&lt;a href=&quot;#写一个跟try-parse一样性质的方法&quot; class=&quot;headerlink&quot; title=&quot;写一个跟try-parse一样性质的方法&quot;&gt;&lt;/a&gt;写一个跟try-parse一样性质的方法&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2022-1-8</title>
    <link href="http://example.com/2022/01/08/2022-1-9/"/>
    <id>http://example.com/2022/01/08/2022-1-9/</id>
    <published>2022-01-07T16:00:00.000Z</published>
    <updated>2022-01-24T09:13:55.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法练习1"><a href="#方法练习1" class="headerlink" title="方法练习1"></a>方法练习1</h2><p>用方法来实现：有一个字符串数组<br>{“马龙”，“迈克尔乔丹”，“雷吉米勒”，“蒂姆邓肯”，“科比布莱恩特”}<br>请输出最长的字符串</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">namespace _2022_1_8</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            string[] name = {"马龙","迈克尔乔丹","雷吉米勒","蒂姆邓肯","科比布莱恩特"};</span><br><span class="line">            int MaxLenth = GetLength(name);</span><br><span class="line">            System.Console.WriteLine(MaxLenth);</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 求一个数组中字符串最长的长度</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name="name"&gt;数组名&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;最长长度&lt;/returns&gt;</span><br><span class="line">        public static int GetLength(string[] name)</span><br><span class="line">        {</span><br><span class="line">            string MaxLength = name[0];</span><br><span class="line">            for (int i = 0; i &lt; name.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                if (name[i].Length &gt; MaxLength.Length)</span><br><span class="line">                {</span><br><span class="line">                     MaxLength= name[i];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            return MaxLength.Length;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="方法练习2"><a href="#方法练习2" class="headerlink" title="方法练习2"></a>方法练习2</h2><p>请计算出一个整数数组的平均值，保留两位小数</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace _2022_1_8</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            int[] Number = { 1, 2, 7 };</span><br><span class="line">            double Eve = GetEve(Number);</span><br><span class="line">            string s = Eve.ToString("0.00");</span><br><span class="line">            Eve = Convert.ToDouble(s);</span><br><span class="line">            Console.WriteLine(Eve);</span><br><span class="line">        }</span><br><span class="line">        public static double GetEve(int[] Number)</span><br><span class="line">        {</span><br><span class="line">            double sum = 0;</span><br><span class="line">            for (int i = 0; i &lt; Number.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                sum += Number[i];</span><br><span class="line">            }</span><br><span class="line">            return sum / Number.Length;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="方法练习3"><a href="#方法练习3" class="headerlink" title="方法练习3"></a>方法练习3</h2><p>接受输入后判断其等级<br>判断依据如下：等级优90-100，等级亮80-89</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace _2022_1_9</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine("请输入考试成绩");</span><br><span class="line">            int score = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">            string level = GetLevel(score);</span><br><span class="line">            Console.WriteLine("考试等地为{0}", level);</span><br><span class="line">        }</span><br><span class="line">        public static string GetLevel(int score)</span><br><span class="line">        {</span><br><span class="line">            string level = "";</span><br><span class="line">            switch (score / 10)</span><br><span class="line">            {</span><br><span class="line">                case 10:</span><br><span class="line">                case 9: level = "优"; break;</span><br><span class="line">                case 8: level = "良"; break;</span><br><span class="line">                case 7:</span><br><span class="line">                case 6: level = "合格"; break;</span><br><span class="line">                default: level = "不合格"; break;</span><br><span class="line">            }</span><br><span class="line">            return level;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="方法练习4"><a href="#方法练习4" class="headerlink" title="方法练习4"></a>方法练习4</h2><p>反串字符串数组<br>循环数组.length/2次<br>for中循环体<br>{<br>    string temp=name[i];<br>    names[i]=names[names.length-1-i];<br>    names[names.length.length-1-i]=temp;<br>}<br>循环输出；<br>方法二：array.revers（数组名）</p><hr><h2 id="方法练习5"><a href="#方法练习5" class="headerlink" title="方法练习5"></a>方法练习5</h2><p>写一个方法，计算圆的面积和周长</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace _2022_1_9</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            //写一个方法，计算圆的面积和周长</span><br><span class="line">            Console.WriteLine("请输入圆的半径长");</span><br><span class="line">            double r = Convert.ToDouble(Console.ReadLine());</span><br><span class="line">            double S, C;</span><br><span class="line">            SandC(r, out S, out C);</span><br><span class="line">            Console.WriteLine("面积为{0}，周长为{1}",S,C);</span><br><span class="line">        }</span><br><span class="line">        public static void  SandC(double r,out double S,out double C)</span><br><span class="line">        {</span><br><span class="line">             S = 3.14 * r * r;</span><br><span class="line">             C = 2 * 3.14 * r;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p>计算任意多个数间最大值</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">namespace _2022_1_9</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            double Max=GetMax(1, 2, 3, 4, 5, 6);</span><br><span class="line">            Console.WriteLine(Max);</span><br><span class="line">        }</span><br><span class="line">        public static double GetMax(params double[] n)</span><br><span class="line">        {</span><br><span class="line">            double Max = n[0];</span><br><span class="line">            for (int i = 0; i &lt; n.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                if (n[i] &gt; Max)</span><br><span class="line">                {</span><br><span class="line">                    Max = n[i];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            return Max;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p>通过冒泡排序对数组进行升序排序</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace _2022_1_9</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            int[] nums = { 1, 3, 5, 7, 90, 2, 4, 6, 8, 10 };</span><br><span class="line">            Change(nums);</span><br><span class="line">            for (int i = 0; i &lt; nums.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(nums[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        public static void Change(int[] nums)</span><br><span class="line">        {</span><br><span class="line">            for (int i = 0; i &lt; nums.Length-1; i++)</span><br><span class="line">            {</span><br><span class="line">                for (int j = 0; j &lt; nums.Length-1-i; j++)</span><br><span class="line">                {</span><br><span class="line">                    if (nums[j] &gt; nums[j + 1])</span><br><span class="line">                    {</span><br><span class="line">                        int temp = nums[j];</span><br><span class="line">                        nums[j] = nums[j + 1];</span><br><span class="line">                        nums[j + 1] = temp;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;方法练习1&quot;&gt;&lt;a href=&quot;#方法练习1&quot; class=&quot;headerlink&quot; title=&quot;方法练习1&quot;&gt;&lt;/a&gt;方法练习1&lt;/h2&gt;&lt;p&gt;用方法来实现：有一个字符串数组&lt;br&gt;{“马龙”，“迈克尔乔丹”，“雷吉米勒”，“蒂姆邓肯”，“科比布莱恩特”}&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>今天也是充满希望的一天</title>
    <link href="http://example.com/2022/01/03/2022-1-3/"/>
    <id>http://example.com/2022/01/03/2022-1-3/</id>
    <published>2022-01-02T16:00:00.000Z</published>
    <updated>2022-01-24T09:16:15.542Z</updated>
    
    <content type="html"><![CDATA[<p>c#中没有全局变量这个东西<br>但是我们可以通过静态字段来模拟全局变量<br>从而达到函数能获取main函数中的变量</p><hr><h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h2><p>读取输入的整数，定义成方法<br>多次调用（如果用户输入的是数字，则返回，否则提示重新输入）<br>*方法对的功能一定要单一！！<br>*方法中最忌讳的就是提示用户输入的字眼</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace _2022_2_3</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine("请输入一个数字");</span><br><span class="line">            string input = Console.ReadLine();</span><br><span class="line">            int result = Get(input);</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 这个方法需要判断用户输入是不是数字</span><br><span class="line">        /// 如果用户输入的是数字，则返回，否则提示重新输入</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name="num"&gt;输入的数字&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;返回值&lt;/returns&gt;</span><br><span class="line">        public static int Get(string s)</span><br><span class="line">        {</span><br><span class="line">            while (true)</span><br><span class="line">            {</span><br><span class="line">                try</span><br><span class="line">                {</span><br><span class="line">                    int number = Convert.ToInt32(s);</span><br><span class="line">                    return number;</span><br><span class="line">                }</span><br><span class="line">                catch</span><br><span class="line">                {</span><br><span class="line">                    Console.WriteLine("请重新输入");</span><br><span class="line">                    s = Console.ReadLine();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h2><p>只能让用户输入yes或者no，如果不是就重新输入</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace _2022_2_3</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine("请输入yes或者no");</span><br><span class="line">            string answer = Console.ReadLine();</span><br><span class="line">            string ANSWER = GetAnswer(answer);</span><br><span class="line">            Console.WriteLine(ANSWER);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 限定用户只能输入yes或者no</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name="answer"&gt;yes或者no&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;用户输入的结果&lt;/returns&gt;</span><br><span class="line">        public static string GetAnswer(string answer)</span><br><span class="line">        {</span><br><span class="line">            while (true)</span><br><span class="line">            {</span><br><span class="line">                if (answer == "yes" || answer == "no")</span><br><span class="line">                {</span><br><span class="line">                    return answer;</span><br><span class="line">                }</span><br><span class="line">                else</span><br><span class="line">                {</span><br><span class="line">                    Console.WriteLine("请重新输入");</span><br><span class="line">                    answer = Console.ReadLine();</span><br><span class="line">                }</span><br><span class="line">            }           </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h2><p>计算输入数组的和</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">namespace _2022_2_3</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            int[] num = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };</span><br><span class="line">            int sum = Plus(num);</span><br><span class="line">            Console.WriteLine(sum);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 计算一个整数类型数组的总和，并返回总和值</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name="num"&gt;要求总和的数组&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;总和值&lt;/returns&gt;</span><br><span class="line">        public static int Plus(int[] num)</span><br><span class="line">        {</span><br><span class="line">            int sum = 0;</span><br><span class="line">            for (int i = 0; i &lt; num.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                sum += num[i];</span><br><span class="line">            }</span><br><span class="line">            return sum;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="高级参数"><a href="#高级参数" class="headerlink" title="高级参数"></a>高级参数</h2><p>out参数：侧重于在一个方法中返回多个不同类型的值<br>（如果你在一个方法中，返回多个相同类型的值的时候，可以考虑返回一个数组<br>但是如果返回多个不同类型的值的时候，就不行了，这个时候可以考虑使用out参数）</p><hr><h2 id="out类型练习"><a href="#out类型练习" class="headerlink" title="out类型练习"></a>out类型练习</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">namespace _2022_2_3</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            Console.WriteLine("请输入您的用户名");</span><br><span class="line">            string name = Console.ReadLine();</span><br><span class="line">            Console.WriteLine("请输入您的密码");</span><br><span class="line">            string pwd = Console.ReadLine();</span><br><span class="line">            string msg;</span><br><span class="line">            bool result = IsLogin(name, pwd, out msg);</span><br><span class="line">            Console.WriteLine("登录结果{0}",result);</span><br><span class="line">            Console.WriteLine("登录信息{0}",msg);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">        /// &lt;summary&gt;</span><br><span class="line">        /// 判断登录是否成功</span><br><span class="line">        /// &lt;/summary&gt;</span><br><span class="line">        /// &lt;param name="name"&gt;用户名&lt;/param&gt;</span><br><span class="line">        /// &lt;param name="pwd"&gt;密码&lt;/param&gt;</span><br><span class="line">        /// &lt;param name="msg"&gt;提示信息&lt;/param&gt;</span><br><span class="line">        /// &lt;returns&gt;登录状态提示&lt;/returns&gt;</span><br><span class="line">        public static bool IsLogin(string name, string pwd ,out string msg)</span><br><span class="line">        {</span><br><span class="line">            if (name == "admin" &amp;&amp; pwd == "888888")</span><br><span class="line">            {</span><br><span class="line">                msg = "登录成功！";</span><br><span class="line">                return true;</span><br><span class="line">            }</span><br><span class="line">            else if (name == "admin")</span><br><span class="line">            {</span><br><span class="line">                msg = "密码错误";</span><br><span class="line">                return false;</span><br><span class="line">            }</span><br><span class="line">            else if(pwd == "888888")</span><br><span class="line">            {</span><br><span class="line">                msg = "用户名错误";</span><br><span class="line">                return false;</span><br><span class="line">            }</span><br><span class="line">            else</span><br><span class="line">            {</span><br><span class="line">                msg = "未知错误";</span><br><span class="line">                return false;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="去放松一会"><a href="#去放松一会" class="headerlink" title="去放松一会"></a>去放松一会</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;c#中没有全局变量这个东西&lt;br&gt;但是我们可以通过静态字段来模拟全局变量&lt;br&gt;从而达到函数能获取main函数中的变量&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;练习1&quot;&gt;&lt;a href=&quot;#练习1&quot; class=&quot;headerlink&quot; title=&quot;练习1&quot;&gt;&lt;/a&gt;练习1&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>今天你睡饱了吗①</title>
    <link href="http://example.com/2022/01/02/2022-1-2/"/>
    <id>http://example.com/2022/01/02/2022-1-2/</id>
    <published>2022-01-01T16:00:00.000Z</published>
    <updated>2022-01-24T09:16:48.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="困"><a href="#困" class="headerlink" title="困"></a>困</h2><p>想着放假调个正常点的作息，昨天硬是到5点没睡着，<br>我现在是一会一个哈欠一会一个，困死了<br>今天是2022年第二天，冲<br>下面是数组的三个练习</p><hr><h2 id="数组练习1"><a href="#数组练习1" class="headerlink" title="数组练习1"></a>数组练习1</h2><p>数组中都是人名，（老杨，老苏，老邹，老虎，老牛，老马）<br>要分割成–&gt;老杨|老苏|老邹|老虎|老牛|老马<br>思路：通过循环，获取每个元素，都累加到字符串中，用|分割</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace _2022_1_2</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            string[] names = { "老杨", "老苏", "老邹", "老虎", "老牛", "老马" };</span><br><span class="line">            string str = null;</span><br><span class="line">            for (int i = 0; i &lt; names.Length-1; i++)</span><br><span class="line">            {</span><br><span class="line">                str += names[i]+"|";</span><br><span class="line">            }</span><br><span class="line">            Console.WriteLine(str+names[names.Length-1]);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="数组练习2"><a href="#数组练习2" class="headerlink" title="数组练习2"></a>数组练习2</h2><p>将一个整数数组每一个元素进行如下处理<br>如果元素为正数，这个位置元素值加一<br>如果元素为负数，这个位置元素值减一，如果元素为0，则不变<br>解题思路：不会去买块豆腐</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace _2022_1_2</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            int[] nums = { 1, -2, 3, -4, 5, 6, 0 };</span><br><span class="line">            for (int i = 0; i &lt; nums.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                if (nums[i] &gt; 0)</span><br><span class="line">                {</span><br><span class="line">                    nums[i] += 1;</span><br><span class="line">                }</span><br><span class="line">                else if (nums[i] &lt; 0)</span><br><span class="line">                {</span><br><span class="line">                    nums[i] -= 1;</span><br><span class="line">                }</span><br><span class="line">                else</span><br><span class="line">                {</span><br><span class="line">                    nums[i] = 0;</span><br><span class="line">                }</span><br><span class="line">                Console.WriteLine(nums[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="数组练习3"><a href="#数组练习3" class="headerlink" title="数组练习3~"></a>数组练习3~</h2><p>将一个数组中元素进行翻转{“我”，“是”，“好人”}-&gt;{“好人”，“是”，“我”}<br>解题思路：*让下标为i的元素与下标为length-1-i的元素交换</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace _2022_1_2</span><br><span class="line">{</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            string[] names = { "我", "是", "好人" };</span><br><span class="line">            for (int i = 0; i &lt; names.Length/2; i++)</span><br><span class="line">            {</span><br><span class="line">                string mid = names[i];</span><br><span class="line">                names[i] = names[names.Length - 1 - i];</span><br><span class="line">                names[names.Length - 1 - i] = mid;</span><br><span class="line">            }</span><br><span class="line">            for (int i = 0; i &lt; names.Length; i++)</span><br><span class="line">            {</span><br><span class="line">                Console.WriteLine(names[i]);</span><br><span class="line">            }    </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>：将数组中元素按从大到小或从小到大的顺序进行排序<br>排序：从第一个元素开始，与后面每个元素进行比较，直到比较完，到第二个元素….</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; nums.Length-1; i++)</span><br><span class="line">            {</span><br><span class="line">                for (int j = 0; j &lt; nums.Length-1-i; j++)</span><br><span class="line">                {</span><br><span class="line">                    if (nums[j] &gt; nums[j + 1])</span><br><span class="line">                    {</span><br><span class="line">                        int mid = nums[j];</span><br><span class="line">                        nums[j] = nums[j + 1];</span><br><span class="line">                        nums[j + 1] = mid;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br></pre></td></tr></tbody></table></figure><p>此为升序排列 如果要降序排序 &gt; 改为&lt;号<br>C#中可以代替排序的代码：Array.Sort（nums）;//只能实现升序<br>                 Array.Reverse(nums);//倒叙排序</p><hr><h2 id="方法（函数）"><a href="#方法（函数）" class="headerlink" title="方法（函数）"></a>方法（函数）</h2><p>函数的语法：<br>[public] static 返回值类型 方法名 （[参数列表]）<br>{<br>    方法体；<br>}<br>方法写完要在main函数中调用<br>调用语法：类名.方法名（[参数]）<br>某些情况下类名是可以省略的，如果写的方法与main函数同在一个类中，可以省略的</p><hr><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>const int num =10；<br>不许重新赋值</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;困&quot;&gt;&lt;a href=&quot;#困&quot; class=&quot;headerlink&quot; title=&quot;困&quot;&gt;&lt;/a&gt;困&lt;/h2&gt;&lt;p&gt;想着放假调个正常点的作息，昨天硬是到5点没睡着，&lt;br&gt;我现在是一会一个哈欠一会一个，困死了&lt;br&gt;今天是2022年第二天，冲&lt;br&gt;下面是数组的三</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>新年第一天（2）</title>
    <link href="http://example.com/2022/01/01/1-1/"/>
    <id>http://example.com/2022/01/01/1-1/</id>
    <published>2021-12-31T16:00:00.000Z</published>
    <updated>2023-09-19T07:04:30.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接今天早上的写"><a href="#接今天早上的写" class="headerlink" title="接今天早上的写"></a>接今天早上的写</h2><p>变量只能存一个值，而字段能存多个值<br>字段在规则上要在命名前加上_(下划线) </p><hr><p>俩简单例子：<br>//using System;</p><p>//namespace _2022_1_1<br>//{<br>//    public struct Person<br>//    {<br>//        public string _name;<br>//        public int _age;<br>//        public Gender _gender;<br>//    }<br>//    public enum Gender<br>//    {<br>//        男,<br>//        女<br>//    }</p><p>//    class Program<br>//    {<br>//        static void Main(string[] args)<br>//        {<br>            //定义一个结构类型Person，有三个成员，分别是姓名，性别，年龄，性别用枚举类型<br>            //声明两个Person类型的变量，分别表示张三男18岁，小兰女16岁<br>//            Person zsPerson;<br>//            zsPerson._name = “张三”;<br>//            zsPerson._age = 18;<br>//            zsPerson._gender = Gender.男;</p><p>//            Person xlPerson;<br>//            xlPerson._name = “小兰”;<br>//            xlPerson._age = 16;<br>//            xlPerson._gender = Gender.女;</p><p>//            Console.WriteLine(“{0}，{1}，{2}”, zsPerson._name, zsPerson._age, zsPerson._gender);<br>//            Console.WriteLine(“{0}，{1}，{2}”, xlPerson._name, xlPerson._age, xlPerson._gender);<br>//        }<br>//    }<br>//}<br>//using System;</p><p>//namespace _2022_1_1<br>//{</p><p>//    public struct MyColor<br>//    {<br>//        public int _red;<br>//        public int _green;<br>//        public int _blue;</p><p>//    }<br>//    class Program<br>//    {<br>//        static void Main(string[] args)<br>//        {<br>//定义一个结构叫MyColor，有三个成员，分别定义为int类型的red，green，blue<br>//声明一个MyColor类型的变量，并对其成员赋值，使MyColor可以表示成一个红色<br>//首先要搞清楚红绿蓝是三原色，一切的颜色都可以通过红绿蓝从0-255表示出来<br>//            MyColor mc;<br>//            mc._red = 255;<br>//            mc._blue = 0;<br>//            mc._green = 0;<br>//            Console.WriteLine(“{0}”,mc);<br>//            Console.ReadKey();<br>//        }<br>//    }<br>//}</p><hr><p>数组<br>一次性存储多个相同类型的变量（结构是存储不同）<br>语法：数组类型[] 数组名=new 数组类型[数组长度]；<br>数组长度一旦固定了，就不能再被改变了<br>int数组不赋值 默认为0<br>string数组不赋值 默认为 null（null不是空，表示为开空间）<br>bool数组不赋值 默认为false<br>数组的声明方式int [] nums={1,2,4,5};<br>要不就是从[0]开始一个一个循环赋值<br>还有int [] nums=new int[3] {1,2,3};(不推荐)<br>还有int [] nums =new int[] {1,2,3};(不推荐)</p><hr><p>数组的应用/练习<br>using System;</p><p>namespace jichu<br>{<br>    class Program<br>    {<br>        static void Main(string[] args)<br>        {<br>            //练习1，从整数数组中取出最大的整数，最小整数，总和，平均值<br>            int[] nums = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };<br>            int max = int.MinValue;//nums[0];<br>            int min = int.MaxValue;//nums[0];<br>            int sum = 0;<br>            for (int i = 0; i &lt; nums.Length; i++)<br>            {<br>                if (nums[i] &gt; max)<br>                {<br>                    max = nums[i];<br>                }<br>                if (nums[i] &lt; min)<br>                {<br>                    min = nums[i];<br>                }<br>                sum += nums[i];<br>            }<br>            Console.WriteLine(“这个数组的最大值是{0},最小值是{1},总和为{2},平均数是{3}”,max,min,sum,sum/nums.Length);<br>            Console.ReadKey();<br>        }<br>    }<br>}</p><hr><p>c#内容就写到这里了<br>这里我就不装了，2022-1-1曼城2-1逆转阿森纳<br>虽然赛程密集，但是这场左后卫的阿克真的不适应这个位置和左边锋的斯特林没有任何配合<br>导致b席和丁丁得回撤到后场拿球，更何况曼城是著名的无锋阵，没有支点，致使阿森纳从全场看下来<br>都是更加优秀的一边<br>关于点球和两黄变一红，我觉得没得洗，两强相遇，更加兴奋的球队更能占据主动，把握场上局势<br>阿森纳确实做得好，但是越兴奋越容易上头，把握不好自己的情绪就是拿红牌下去的主要原因<br>这场踢阿森纳确实如瓜瓜所说进5年内最强的阿森纳，确实未来可期<br>但是我的主队还是曼城，罗德里最后时刻的绝杀太帅了，这场的3分实在是太关键了<br>是这个赛季英超冠军上比较关键的一场了，gooooooal~~<br><img src="/2022/01/01/1-1/%E7%BB%9D%E6%9D%80.jpg" alt="绝杀"></p><hr><p>我这个寒假尽量做到天天写blog好吧，也是督促我自己早点掌握c#和u3d<br>今天还是1月1号，祝朋友们恭喜发财，万事顺意，再见！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;接今天早上的写&quot;&gt;&lt;a href=&quot;#接今天早上的写&quot; class=&quot;headerlink&quot; title=&quot;接今天早上的写&quot;&gt;&lt;/a&gt;接今天早上的写&lt;/h2&gt;&lt;p&gt;变量只能存一个值，而字段能存多个值&lt;br&gt;字段在规则上要在命名前加上_(下划线) &lt;/p&gt;
&lt;hr&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>新年第一天</title>
    <link href="http://example.com/2022/01/01/2022/"/>
    <id>http://example.com/2022/01/01/2022/</id>
    <published>2021-12-31T16:00:00.000Z</published>
    <updated>2023-09-19T07:06:01.211Z</updated>
    
    <content type="html"><![CDATA[<p>枚举与别的类型之间的转换<br>枚举类型默认是跟int可以转换<br>复习一哈 强制类型转换<br>int n=待转换的类型（要转换的值）<br>例：(int 强制转换成枚举类型)<br>QQstate state=QQstate.Online;<br>int n =（int）state</p><p>（枚举类型强转int类型）<br>int n1=3；<br>QQstate state=（QQstate）n1；<br>console.writeline(state);<br>console.readkey();<br>复习：折叠不想看到的内容 #region  #endregion</p><p>*所有类型都能转换成string类型 用tostring<br>例：int n1=10;<br>double<br>decimal都行<br>string s =n1.ToString();<br>console.writeline(s);<br>console.readkey();<br>结果为10<br>例：（枚举-&gt;string）<br>QQstate state =QQstate.online;<br>string s =state.ToString();<br>console.writeline(s);<br>console.readkey(); </p><p>*将字符串转换成枚举类型<br>回忆一下：convert.toint32()<br>所以这里要用到Enum.parse（）；<br>例：string s =”0”;<br>QQstate state =(QQstate)Enum.parse(typeof(QQstate),s);<br>console.writeline(state);<br>console.readkey();<br>输出值为枚举第一个值<br>总结：枚举类型默认是与int兼容，可通过强转相互转换<br>当转换枚举中没有的值时，不抛异常，直接显示数字<br>同样也能与string转换，如果枚举转换成string，直接用tostring<br>如果将string转换成枚举要用一下代码：（要转换的枚举类型）Enum.Parse(typeof（要转换的枚举类型），“要转换的字符转”)；<br>转换的是数字，枚举没有，不抛异常<br>转换为文本，枚举中没有，抛异常</p><hr><p>这里有个简单的练习</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">namespace _2021_12_30</span><br><span class="line">{</span><br><span class="line">    // public enum gender</span><br><span class="line">    //{</span><br><span class="line">    //    男,</span><br><span class="line">    //    女</span><br><span class="line">    //}</span><br><span class="line">    public enum state{//state这里首字母都要大写，要求</span><br><span class="line">        online=1,</span><br><span class="line">        offline,</span><br><span class="line">        leave,</span><br><span class="line">        busy,</span><br><span class="line">        qMe</span><br><span class="line">    }</span><br><span class="line">    class Program</span><br><span class="line">    {</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        {</span><br><span class="line">            //int n = 10;</span><br><span class="line">            //gender gender = gender.男;</span><br><span class="line">            //Console.WriteLine("Hello World!");</span><br><span class="line">            //提示用户输入一个在线状态，我们接收，将输入转换成枚举类型，再打印到控制台中</span><br><span class="line">            Console.WriteLine("请输入您的在线状态,1--online 2--offline 3--leave 4--busy 5--qMe");</span><br><span class="line">            string input = Console.ReadLine();</span><br><span class="line">            switch (input)</span><br><span class="line">            {</span><br><span class="line">                case "1": state s1 = (state)Enum.Parse(typeof(state), input);</span><br><span class="line">                    Console.WriteLine("您选择的在线状态是{0}",s1);</span><br><span class="line">                    break;</span><br><span class="line">                case "2": state s2 = (state)Enum.Parse(typeof(state), input);</span><br><span class="line">                    Console.WriteLine("您选择的在线状态是{0}",s2);</span><br><span class="line">                    break;</span><br><span class="line">                case "3": state s3 = (state)Enum.Parse(typeof(state), input);</span><br><span class="line">                    Console.WriteLine("您选择的在线状态是{0}",s3);</span><br><span class="line">                    break;</span><br><span class="line">                case "4": state s4 = (state)Enum.Parse(typeof(state), input);</span><br><span class="line">                    Console.WriteLine("您选择的在线状态是{0}", s4);</span><br><span class="line">                    break;</span><br><span class="line">                case "5":state s5 = (state)Enum.Parse(typeof(state), input);</span><br><span class="line">                    Console.WriteLine("您选择的在线状态是{0}", s5);</span><br><span class="line">                    break;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p>结构：可以帮助我们一次性声明多个不同类型的变量<br>语法：[public] struct 结构名（这里跟enum一样结构名首字母要大写）<br>{<br>    成员；<br>}</p><hr><p>今天是2022年1月1日，希望把去年不开心的忘记<br>新的一年发发出传奇，叮叮都能振到刀，u3d学习顺利，考研顺利，找到个npy<br>祝我身边的朋友身体健康，事事顺心<br><img src="/2022/01/01/2022/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90.jpg" alt="新年快乐"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;枚举与别的类型之间的转换&lt;br&gt;枚举类型默认是跟int可以转换&lt;br&gt;复习一哈 强制类型转换&lt;br&gt;int n=待转换的类型（要转换的值）&lt;br&gt;例：(int 强制转换成枚举类型)&lt;br&gt;QQstate state=QQstate.Online;&lt;br&gt;int n =（in</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>今天比较有空</title>
    <link href="http://example.com/2021/10/22/10-22/"/>
    <id>http://example.com/2021/10/22/10-22/</id>
    <published>2021-10-21T16:00:00.000Z</published>
    <updated>2023-09-19T07:05:49.493Z</updated>
    
    <content type="html"><![CDATA[<p>开学也是过了很久，主要就是记录一下这一段时间发生了什么<br>虽然这个学期的课不是很多，懂的都懂，毕竟很蛮多线上课的<br>但为什么不想写呢，主要还是我懒</p><hr><p>首先就是这个东西<br><img src="/2021/10/22/10-22/VR.jpg" alt="游戏机"><br>哇这个东西真的没有必要，没有之前心心念念，有了之后么基本就是没怎么玩过<br>花几千块真的不值，还不如多搓几顿，现在我把它跟我的零食放在一起，也算每<br>天还能碰到两下不会落下什么灰。<br>如果对VR很感兴趣，或者是想每天锻炼的朋友，可以考虑入手<br>如果只是想玩玩，没必要，我是大傻呗</p><hr><p>你别看东盛每次都是排队排的满满当当的<br><img src="/2021/10/22/10-22/%E4%B8%9C%E7%9B%9B.jpg" alt="吃饭"><br>第一次去我真的觉得还行<br>第二次就感觉品种太少了，真的不太行<br>肉的质量其实还蛮不错，茶也还行，也就这还行了<br>那个烤生蚝的师傅，真的能磨洋工，两个小时就做了一次<br>如果下一次没有人邀请我去，我自己是不会去的，好吧<br>还不如楼下的牛牛<br>说到这里，脸上长痘痘的朋友要小心楼下的老阿姨，他会让你去好像5楼，<br>不知道要干啥，听说是给你整半个脸，然后另外半个要收费，总不能免费<br>体验半个出去吧，那肯定很奇怪<br>但是像我们这么聪明的孩子，肯定不会上老阿姨的当啦~</p><hr><p><img src="/2021/10/22/10-22/a.jpg" alt="超级植物公司"><br><img src="/2021/10/22/10-22/b.jpg" alt="超级植物公司"><br><img src="/2021/10/22/10-22/c.jpg" alt="超级植物公司"><br>这几张照片反正不是我拍的，去的是那个好像叫超级植物公司<br>我同学大众点评上找的，本来以为能消磨几个小时时间，本来以为是个什么展览<br>的地方<br>结果!结果！！结果！！！<br>就是一个小商店，卖跟植物有关的环保物品的<br>还有就是这是在一个像小厂房一样的地方，都是摄影师带客人拍照的<br>但是我觉得不行，我也不会带我以后的女朋友来这种地方<br>直接X掉</p><hr><p>不管说这种峰会是什么性质，是那种几个老板或者几个投资人举办的一种带<br>合作性质还是怎么样的，对于我来说确实是见了见世面<br>最主要还是少了节课，嘻嘻嘻<br><img src="/2021/10/22/10-22/q.jpg" alt="峰会"><br><img src="/2021/10/22/10-22/w.jpg" alt="峰会"><br>滴水湖里面那个酒店的环境还是很不错的<br>本来说是包午饭的，然后我们看到了下面这张图<br><img src="/2021/10/22/10-22/p.jpg" alt="峰会"><br>没想到听个峰会还能吃个自助，直接爽歪歪<br>结果，就<br><img src="/2021/10/22/10-22/g.jpg" alt="峰会"></p><hr><p>还有什么呢我想想<br>永劫无间我还是很轻松上了个陨星，还是很满足的<br>学校的一等奖学金差一点还是很可惜，只能混个二等，这个学校没有奖学金才不正常<br>对于未来一年还是看的挺清晰的，玩好最后几个月，好好享受大学生活<br>好像我们两个寝室就我还没有女朋友了，这几个b也天天催我，就我们这个<br>专业怎么去认识女生嘛，我又不是社牛，更何况在原来有很多痣的情况下<br>又开始发痘痘了，我mm好像比我还捉急，又涂这涂那的，好像一时半会也好不了<br>反正要是能上岸的话，我一定好好考虑一下<br><img src="/2021/10/22/10-22/fdw.jpg" alt="照片"></p><hr><p>英雄联盟手游其实还不错的，就是年纪大了，手指已经不灵活了，还是敲键盘更加熟练<br>就看看好友上上线，看一看那个…..，就可以了……<br>我入手仙剑系列真的是因为仙剑3是我童年电视剧比较喜欢的了<br>仙剑7玩下来真的，只能说便秘，它之前引以为傲的剧情已经消失了<br>还好只是买的标准版，里面好像送的小礼品，如果有想要的我就直接送了<br>（好像就两个徽章，一个书签）我没图，东西在学校里</p><hr><p>下次写blog也不知道是什么时候了，反正想到就写呗，有缘再见</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开学也是过了很久，主要就是记录一下这一段时间发生了什么&lt;br&gt;虽然这个学期的课不是很多，懂的都懂，毕竟很蛮多线上课的&lt;br&gt;但为什么不想写呢，主要还是我懒&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先就是这个东西&lt;br&gt;&lt;img src=&quot;/2021/10/22/10-22/VR.jpg&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>枚举</title>
    <link href="http://example.com/2021/09/01/9-1/"/>
    <id>http://example.com/2021/09/01/9-1/</id>
    <published>2021-08-31T16:00:00.000Z</published>
    <updated>2022-01-06T09:19:16.878Z</updated>
    
    <content type="html"><![CDATA[<p>三元表达式<br>表达式1？表达式2：表达式3；<br>表达式1一般为一个关系表达式<br>如果表达式1为true 整个3元表达式为表达式2<br>如果表达式2为false 整个3元表达式为表达式3<br>*表达式2的结果类型必须与表达式3的结果类型一致，并且也要跟整个三元表达式的结果类型一致</p><hr><p>产生随机数<br>1、创建能够产生随机数的对象<br>没有对象 new一个<br>例：random r=new random（）；<br>r就是对象<br>2、让产生随机数的对象调用方法来产生随机数<br>r.Next()来产生随机数<br>int rnumber=r.Next（1,10）//返回一个1-9的随机数，左闭右开区间</p><hr><p>*常量<br>声明常量的语法：const 变量类型 变量名=值；<br>最大特点就是不能被重新赋值</p><hr><p><em>枚举<br>语法：<br>[public] enum 枚举名<br>{<br>    值1，<br>    值2，<br>    值3，<br>    ……<br>}<br>public:访问修饰符 公开的 哪都可以访问<br>enum:关键字，声明枚举的关键字<br>枚举名:要符合Pascal命名规范<br><em>将枚举写到命名空间下，类的外面（整个工程都能用）<br>枚举就是一个简单的</em></em>变量类型** 只是声明、赋值、使用方式不同 本质还是存储数据的<br>例：public enum Gender<br>{<br>    男，<br>    女<br>}//声明枚举 gender<br>Gender gender=Gender.男；<br>-&gt;变量类型 变量名=值<br>这里的Gender就是自己建的变量类型<br>*枚举和int和string之间的类型转换<br>枚举类型默认可以和int类型进行转换 和int类型是兼容的<br>例：int n=（int）state这里的state是枚举类型<br>//首先所有类型都能转换成string类型 调用tostring（）；<br>int n1=10；<br>string s=n1.ToString（）；<br>枚举也不例外</p><p>*将字符串换成枚举类型//比较麻烦的<br>例子：    string s=“0”<br>    枚举类型 state=（枚举类型）Enum.Parse(typeof（枚举类型）,s)<br>    //调用parse方法是为了让他帮我们将一个字符串类型转换成枚举类型</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;三元表达式&lt;br&gt;表达式1？表达式2：表达式3；&lt;br&gt;表达式1一般为一个关系表达式&lt;br&gt;如果表达式1为true 整个3元表达式为表达式2&lt;br&gt;如果表达式2为false 整个3元表达式为表达式3&lt;br&gt;*表达式2的结果类型必须与表达式3的结果类型一致，并且也要跟整个三元</summary>
      
    
    
    
    
  </entry>
  
</feed>
